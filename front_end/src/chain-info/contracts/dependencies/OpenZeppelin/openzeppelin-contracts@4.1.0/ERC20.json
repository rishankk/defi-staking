{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "C:/Users/Rishank/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.1.0/contracts/token/ERC20/ERC20.sol",
    "1": "C:/Users/Rishank/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.1.0/contracts/token/ERC20/IERC20.sol",
    "2": "C:/Users/Rishank/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.1.0/contracts/token/ERC20/extensions/IERC20Metadata.sol",
    "3": "C:/Users/Rishank/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.1.0/contracts/utils/Context.sol"
  },
  "ast": {
    "absolutePath": "C:/Users/Rishank/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.1.0/contracts/token/ERC20/ERC20.sol",
    "exportedSymbols": {
      "Context": [
        652
      ],
      "ERC20": [
        526
      ],
      "IERC20": [
        604
      ],
      "IERC20Metadata": [
        629
      ]
    },
    "id": 527,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 21,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:0"
      },
      {
        "absolutePath": "C:/Users/Rishank/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.1.0/contracts/token/ERC20/IERC20.sol",
        "file": "./IERC20.sol",
        "id": 22,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 527,
        "sourceUnit": 605,
        "src": "58:22:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "C:/Users/Rishank/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.1.0/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "file": "./extensions/IERC20Metadata.sol",
        "id": 23,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 527,
        "sourceUnit": 630,
        "src": "81:41:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "C:/Users/Rishank/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.1.0/contracts/utils/Context.sol",
        "file": "../../utils/Context.sol",
        "id": 24,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 527,
        "sourceUnit": 653,
        "src": "123:33:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 26,
              "name": "Context",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 652,
              "src": "1339:7:0"
            },
            "id": 27,
            "nodeType": "InheritanceSpecifier",
            "src": "1339:7:0"
          },
          {
            "baseName": {
              "id": 28,
              "name": "IERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 604,
              "src": "1348:6:0"
            },
            "id": 29,
            "nodeType": "InheritanceSpecifier",
            "src": "1348:6:0"
          },
          {
            "baseName": {
              "id": 30,
              "name": "IERC20Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 629,
              "src": "1356:14:0"
            },
            "id": 31,
            "nodeType": "InheritanceSpecifier",
            "src": "1356:14:0"
          }
        ],
        "canonicalName": "ERC20",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 25,
          "nodeType": "StructuredDocumentation",
          "src": "158:1162:0",
          "text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin guidelines: functions revert instead\n of returning `false` on failure. This behavior is nonetheless conventional\n and does not conflict with the expectations of ERC20 applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
        },
        "fullyImplemented": true,
        "id": 526,
        "linearizedBaseContracts": [
          526,
          629,
          604,
          652
        ],
        "name": "ERC20",
        "nameLocation": "1330:5:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 35,
            "mutability": "mutable",
            "name": "_balances",
            "nameLocation": "1414:9:0",
            "nodeType": "VariableDeclaration",
            "scope": 526,
            "src": "1377:46:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 34,
              "keyType": {
                "id": 32,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1386:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1377:28:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 33,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1397:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 41,
            "mutability": "mutable",
            "name": "_allowances",
            "nameLocation": "1488:11:0",
            "nodeType": "VariableDeclaration",
            "scope": 526,
            "src": "1430:69:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
              "typeString": "mapping(address => mapping(address => uint256))"
            },
            "typeName": {
              "id": 40,
              "keyType": {
                "id": 36,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1439:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1430:49:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                "typeString": "mapping(address => mapping(address => uint256))"
              },
              "valueType": {
                "id": 39,
                "keyType": {
                  "id": 37,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1459:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "Mapping",
                "src": "1450:28:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "valueType": {
                  "id": 38,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1470:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 43,
            "mutability": "mutable",
            "name": "_totalSupply",
            "nameLocation": "1522:12:0",
            "nodeType": "VariableDeclaration",
            "scope": 526,
            "src": "1506:28:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 42,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1506:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 45,
            "mutability": "mutable",
            "name": "_name",
            "nameLocation": "1556:5:0",
            "nodeType": "VariableDeclaration",
            "scope": 526,
            "src": "1541:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 44,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1541:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 47,
            "mutability": "mutable",
            "name": "_symbol",
            "nameLocation": "1582:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 526,
            "src": "1567:22:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 46,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1567:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 63,
              "nodeType": "Block",
              "src": "1955:57:0",
              "statements": [
                {
                  "expression": {
                    "id": 57,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 55,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 45,
                      "src": "1965:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 56,
                      "name": "name_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50,
                      "src": "1973:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1965:13:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 58,
                  "nodeType": "ExpressionStatement",
                  "src": "1965:13:0"
                },
                {
                  "expression": {
                    "id": 61,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 59,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 47,
                      "src": "1988:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 60,
                      "name": "symbol_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 52,
                      "src": "1998:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1988:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 62,
                  "nodeType": "ExpressionStatement",
                  "src": "1988:17:0"
                }
              ]
            },
            "documentation": {
              "id": 48,
              "nodeType": "StructuredDocumentation",
              "src": "1596:297:0",
              "text": " @dev Sets the values for {name} and {symbol}.\n The defaut value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
            },
            "id": 64,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 53,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 50,
                  "mutability": "mutable",
                  "name": "name_",
                  "nameLocation": "1925:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 64,
                  "src": "1911:19:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 49,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1911:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 52,
                  "mutability": "mutable",
                  "name": "symbol_",
                  "nameLocation": "1946:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 64,
                  "src": "1932:21:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 51,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1932:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1910:44:0"
            },
            "returnParameters": {
              "id": 54,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1955:0:0"
            },
            "scope": 526,
            "src": "1898:114:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              616
            ],
            "body": {
              "id": 73,
              "nodeType": "Block",
              "src": "2146:29:0",
              "statements": [
                {
                  "expression": {
                    "id": 71,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 45,
                    "src": "2163:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 70,
                  "id": 72,
                  "nodeType": "Return",
                  "src": "2156:12:0"
                }
              ]
            },
            "documentation": {
              "id": 65,
              "nodeType": "StructuredDocumentation",
              "src": "2018:54:0",
              "text": " @dev Returns the name of the token."
            },
            "functionSelector": "06fdde03",
            "id": 74,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nameLocation": "2086:4:0",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 67,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2113:8:0"
            },
            "parameters": {
              "id": 66,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2090:2:0"
            },
            "returnParameters": {
              "id": 70,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 74,
                  "src": "2131:13:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 68,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2131:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2130:15:0"
            },
            "scope": 526,
            "src": "2077:98:0",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              622
            ],
            "body": {
              "id": 83,
              "nodeType": "Block",
              "src": "2359:31:0",
              "statements": [
                {
                  "expression": {
                    "id": 81,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 47,
                    "src": "2376:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 80,
                  "id": 82,
                  "nodeType": "Return",
                  "src": "2369:14:0"
                }
              ]
            },
            "documentation": {
              "id": 75,
              "nodeType": "StructuredDocumentation",
              "src": "2181:102:0",
              "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
            },
            "functionSelector": "95d89b41",
            "id": 84,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nameLocation": "2297:6:0",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 77,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2326:8:0"
            },
            "parameters": {
              "id": 76,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2303:2:0"
            },
            "returnParameters": {
              "id": 80,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 84,
                  "src": "2344:13:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 78,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2344:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2343:15:0"
            },
            "scope": 526,
            "src": "2288:102:0",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              628
            ],
            "body": {
              "id": 93,
              "nodeType": "Block",
              "src": "3079:26:0",
              "statements": [
                {
                  "expression": {
                    "hexValue": "3138",
                    "id": 91,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3096:2:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  },
                  "functionReturnParameters": 90,
                  "id": 92,
                  "nodeType": "Return",
                  "src": "3089:9:0"
                }
              ]
            },
            "documentation": {
              "id": 85,
              "nodeType": "StructuredDocumentation",
              "src": "2396:613:0",
              "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "functionSelector": "313ce567",
            "id": 94,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nameLocation": "3023:8:0",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 87,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3054:8:0"
            },
            "parameters": {
              "id": 86,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3031:2:0"
            },
            "returnParameters": {
              "id": 90,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 89,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 94,
                  "src": "3072:5:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 88,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "3072:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3071:7:0"
            },
            "scope": 526,
            "src": "3014:91:0",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              535
            ],
            "body": {
              "id": 103,
              "nodeType": "Block",
              "src": "3235:36:0",
              "statements": [
                {
                  "expression": {
                    "id": 101,
                    "name": "_totalSupply",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 43,
                    "src": "3252:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 100,
                  "id": 102,
                  "nodeType": "Return",
                  "src": "3245:19:0"
                }
              ]
            },
            "documentation": {
              "id": 95,
              "nodeType": "StructuredDocumentation",
              "src": "3111:49:0",
              "text": " @dev See {IERC20-totalSupply}."
            },
            "functionSelector": "18160ddd",
            "id": 104,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nameLocation": "3174:11:0",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 97,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3208:8:0"
            },
            "parameters": {
              "id": 96,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3185:2:0"
            },
            "returnParameters": {
              "id": 100,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 99,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 104,
                  "src": "3226:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 98,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3226:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3225:9:0"
            },
            "scope": 526,
            "src": "3165:106:0",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              543
            ],
            "body": {
              "id": 117,
              "nodeType": "Block",
              "src": "3412:42:0",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 113,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 35,
                      "src": "3429:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 115,
                    "indexExpression": {
                      "id": 114,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 107,
                      "src": "3439:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3429:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 112,
                  "id": 116,
                  "nodeType": "Return",
                  "src": "3422:25:0"
                }
              ]
            },
            "documentation": {
              "id": 105,
              "nodeType": "StructuredDocumentation",
              "src": "3277:47:0",
              "text": " @dev See {IERC20-balanceOf}."
            },
            "functionSelector": "70a08231",
            "id": 118,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "3338:9:0",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 109,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3385:8:0"
            },
            "parameters": {
              "id": 108,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 107,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "3356:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 118,
                  "src": "3348:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 106,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3348:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3347:17:0"
            },
            "returnParameters": {
              "id": 112,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 111,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 118,
                  "src": "3403:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 110,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3403:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3402:9:0"
            },
            "scope": 526,
            "src": "3329:125:0",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              553
            ],
            "body": {
              "id": 138,
              "nodeType": "Block",
              "src": "3749:80:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 130,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 640,
                          "src": "3769:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 131,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3769:12:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 132,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 121,
                        "src": "3783:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 133,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 123,
                        "src": "3794:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 129,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 360,
                      "src": "3759:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 134,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3759:42:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 135,
                  "nodeType": "ExpressionStatement",
                  "src": "3759:42:0"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 136,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3818:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 128,
                  "id": 137,
                  "nodeType": "Return",
                  "src": "3811:11:0"
                }
              ]
            },
            "documentation": {
              "id": 119,
              "nodeType": "StructuredDocumentation",
              "src": "3460:192:0",
              "text": " @dev See {IERC20-transfer}.\n Requirements:\n - `recipient` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
            },
            "functionSelector": "a9059cbb",
            "id": 139,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nameLocation": "3666:8:0",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 125,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3725:8:0"
            },
            "parameters": {
              "id": 124,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 121,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "3683:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 139,
                  "src": "3675:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 120,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3675:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 123,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3702:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 139,
                  "src": "3694:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 122,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3694:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3674:35:0"
            },
            "returnParameters": {
              "id": 128,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 127,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 139,
                  "src": "3743:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 126,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3743:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3742:6:0"
            },
            "scope": 526,
            "src": "3657:172:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              563
            ],
            "body": {
              "id": 156,
              "nodeType": "Block",
              "src": "3985:51:0",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 150,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "4002:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 152,
                      "indexExpression": {
                        "id": 151,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 142,
                        "src": "4014:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4002:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 154,
                    "indexExpression": {
                      "id": 153,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 144,
                      "src": "4021:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4002:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 149,
                  "id": 155,
                  "nodeType": "Return",
                  "src": "3995:34:0"
                }
              ]
            },
            "documentation": {
              "id": 140,
              "nodeType": "StructuredDocumentation",
              "src": "3835:47:0",
              "text": " @dev See {IERC20-allowance}."
            },
            "functionSelector": "dd62ed3e",
            "id": 157,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nameLocation": "3896:9:0",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 146,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3958:8:0"
            },
            "parameters": {
              "id": 145,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 142,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "3914:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 157,
                  "src": "3906:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 141,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3906:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 144,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "3929:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 157,
                  "src": "3921:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 143,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3921:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3905:32:0"
            },
            "returnParameters": {
              "id": 149,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 148,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 157,
                  "src": "3976:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 147,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3976:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3975:9:0"
            },
            "scope": 526,
            "src": "3887:149:0",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              573
            ],
            "body": {
              "id": 177,
              "nodeType": "Block",
              "src": "4263:77:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 169,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 640,
                          "src": "4282:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 170,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4282:12:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 171,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 160,
                        "src": "4296:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 172,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 162,
                        "src": "4305:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 168,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 514,
                      "src": "4273:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 173,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4273:39:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 174,
                  "nodeType": "ExpressionStatement",
                  "src": "4273:39:0"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 175,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4329:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 167,
                  "id": 176,
                  "nodeType": "Return",
                  "src": "4322:11:0"
                }
              ]
            },
            "documentation": {
              "id": 158,
              "nodeType": "StructuredDocumentation",
              "src": "4042:127:0",
              "text": " @dev See {IERC20-approve}.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "095ea7b3",
            "id": 178,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nameLocation": "4183:7:0",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 164,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4239:8:0"
            },
            "parameters": {
              "id": 163,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 160,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "4199:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 178,
                  "src": "4191:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 159,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4191:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 162,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4216:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 178,
                  "src": "4208:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 161,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4208:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4190:33:0"
            },
            "returnParameters": {
              "id": 167,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 166,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 178,
                  "src": "4257:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 165,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4257:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4256:6:0"
            },
            "scope": 526,
            "src": "4174:166:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              585
            ],
            "body": {
              "id": 224,
              "nodeType": "Block",
              "src": "4919:302:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 192,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 181,
                        "src": "4939:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 193,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 183,
                        "src": "4947:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 194,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 185,
                        "src": "4958:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 191,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 360,
                      "src": "4929:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 195,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4929:36:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 196,
                  "nodeType": "ExpressionStatement",
                  "src": "4929:36:0"
                },
                {
                  "assignments": [
                    198
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 198,
                      "mutability": "mutable",
                      "name": "currentAllowance",
                      "nameLocation": "4984:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 224,
                      "src": "4976:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 197,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4976:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 205,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 199,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "5003:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 201,
                      "indexExpression": {
                        "id": 200,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 181,
                        "src": "5015:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "5003:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 204,
                    "indexExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 202,
                        "name": "_msgSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 640,
                        "src": "5023:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 203,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5023:12:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5003:33:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4976:60:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 209,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 207,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 198,
                          "src": "5054:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 208,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 185,
                          "src": "5074:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5054:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
                        "id": 210,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5082:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
                        },
                        "value": "ERC20: transfer amount exceeds allowance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
                        }
                      ],
                      "id": 206,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5046:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 211,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5046:79:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 212,
                  "nodeType": "ExpressionStatement",
                  "src": "5046:79:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 214,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 181,
                        "src": "5144:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 215,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 640,
                          "src": "5152:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 216,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5152:12:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 219,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 217,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 198,
                          "src": "5166:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "id": 218,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 185,
                          "src": "5185:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5166:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 213,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 514,
                      "src": "5135:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 220,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5135:57:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 221,
                  "nodeType": "ExpressionStatement",
                  "src": "5135:57:0"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 222,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5210:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 190,
                  "id": 223,
                  "nodeType": "Return",
                  "src": "5203:11:0"
                }
              ]
            },
            "documentation": {
              "id": 179,
              "nodeType": "StructuredDocumentation",
              "src": "4346:456:0",
              "text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n Requirements:\n - `sender` and `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`.\n - the caller must have allowance for ``sender``'s tokens of at least\n `amount`."
            },
            "functionSelector": "23b872dd",
            "id": 225,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nameLocation": "4816:12:0",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 187,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4895:8:0"
            },
            "parameters": {
              "id": 186,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 181,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "4837:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 225,
                  "src": "4829:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 180,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4829:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 183,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "4853:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 225,
                  "src": "4845:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 182,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4845:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 185,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4872:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 225,
                  "src": "4864:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 184,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4864:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4828:51:0"
            },
            "returnParameters": {
              "id": 190,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 189,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 225,
                  "src": "4913:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 188,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4913:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4912:6:0"
            },
            "scope": 526,
            "src": "4807:414:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 251,
              "nodeType": "Block",
              "src": "5710:118:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 236,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 640,
                          "src": "5729:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 237,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5729:12:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 238,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 228,
                        "src": "5743:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 246,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 239,
                              "name": "_allowances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 41,
                              "src": "5752:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 242,
                            "indexExpression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 240,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 640,
                                "src": "5764:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 241,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5764:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5752:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 244,
                          "indexExpression": {
                            "id": 243,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 228,
                            "src": "5778:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5752:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "id": 245,
                          "name": "addedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 230,
                          "src": "5789:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5752:47:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 235,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 514,
                      "src": "5720:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 247,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5720:80:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 248,
                  "nodeType": "ExpressionStatement",
                  "src": "5720:80:0"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 249,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5817:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 234,
                  "id": 250,
                  "nodeType": "Return",
                  "src": "5810:11:0"
                }
              ]
            },
            "documentation": {
              "id": 226,
              "nodeType": "StructuredDocumentation",
              "src": "5227:384:0",
              "text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "39509351",
            "id": 252,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increaseAllowance",
            "nameLocation": "5625:17:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 231,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 228,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "5651:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 252,
                  "src": "5643:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 227,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5643:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 230,
                  "mutability": "mutable",
                  "name": "addedValue",
                  "nameLocation": "5668:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 252,
                  "src": "5660:18:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 229,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5660:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5642:37:0"
            },
            "returnParameters": {
              "id": 234,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 233,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 252,
                  "src": "5704:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 232,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5704:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5703:6:0"
            },
            "scope": 526,
            "src": "5616:212:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 289,
              "nodeType": "Block",
              "src": "6414:272:0",
              "statements": [
                {
                  "assignments": [
                    263
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 263,
                      "mutability": "mutable",
                      "name": "currentAllowance",
                      "nameLocation": "6432:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 289,
                      "src": "6424:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 262,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6424:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 270,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 264,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "6451:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 267,
                      "indexExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 265,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 640,
                          "src": "6463:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 266,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6463:12:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "6451:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 269,
                    "indexExpression": {
                      "id": 268,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 255,
                      "src": "6477:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6451:34:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6424:61:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 274,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 272,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 263,
                          "src": "6503:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 273,
                          "name": "subtractedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 257,
                          "src": "6523:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6503:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
                        "id": 275,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6540:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                          "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                        },
                        "value": "ERC20: decreased allowance below zero"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                          "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                        }
                      ],
                      "id": 271,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6495:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 276,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6495:85:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 277,
                  "nodeType": "ExpressionStatement",
                  "src": "6495:85:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 279,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 640,
                          "src": "6599:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 280,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6599:12:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 281,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 255,
                        "src": "6613:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 284,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 282,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 263,
                          "src": "6622:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "id": 283,
                          "name": "subtractedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 257,
                          "src": "6641:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6622:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 278,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 514,
                      "src": "6590:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 285,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6590:67:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 286,
                  "nodeType": "ExpressionStatement",
                  "src": "6590:67:0"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 287,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "6675:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 261,
                  "id": 288,
                  "nodeType": "Return",
                  "src": "6668:11:0"
                }
              ]
            },
            "documentation": {
              "id": 253,
              "nodeType": "StructuredDocumentation",
              "src": "5834:476:0",
              "text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
            },
            "functionSelector": "a457c2d7",
            "id": 290,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decreaseAllowance",
            "nameLocation": "6324:17:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 258,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 255,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "6350:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 290,
                  "src": "6342:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 254,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6342:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 257,
                  "mutability": "mutable",
                  "name": "subtractedValue",
                  "nameLocation": "6367:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 290,
                  "src": "6359:23:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 256,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6359:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6341:42:0"
            },
            "returnParameters": {
              "id": 261,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 260,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 290,
                  "src": "6408:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 259,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6408:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6407:6:0"
            },
            "scope": 526,
            "src": "6315:371:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 359,
              "nodeType": "Block",
              "src": "7247:505:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 306,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 301,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 293,
                          "src": "7265:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 304,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7283:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 303,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7275:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 302,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7275:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 305,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7275:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7265:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
                        "id": 307,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7287:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        },
                        "value": "ERC20: transfer from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        }
                      ],
                      "id": 300,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7257:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 308,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7257:70:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 309,
                  "nodeType": "ExpressionStatement",
                  "src": "7257:70:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 316,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 311,
                          "name": "recipient",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 295,
                          "src": "7345:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 314,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7366:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 313,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7358:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 312,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7358:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 315,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7358:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7345:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
                        "id": 317,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7370:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        },
                        "value": "ERC20: transfer to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        }
                      ],
                      "id": 310,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7337:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 318,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7337:71:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 319,
                  "nodeType": "ExpressionStatement",
                  "src": "7337:71:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 321,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 293,
                        "src": "7440:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 322,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 295,
                        "src": "7448:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 323,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 297,
                        "src": "7459:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 320,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 525,
                      "src": "7419:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 324,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7419:47:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 325,
                  "nodeType": "ExpressionStatement",
                  "src": "7419:47:0"
                },
                {
                  "assignments": [
                    327
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 327,
                      "mutability": "mutable",
                      "name": "senderBalance",
                      "nameLocation": "7485:13:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 359,
                      "src": "7477:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 326,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7477:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 331,
                  "initialValue": {
                    "baseExpression": {
                      "id": 328,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 35,
                      "src": "7501:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 330,
                    "indexExpression": {
                      "id": 329,
                      "name": "sender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 293,
                      "src": "7511:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7501:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7477:41:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 335,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 333,
                          "name": "senderBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 327,
                          "src": "7536:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 334,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 297,
                          "src": "7553:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7536:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
                        "id": 336,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7561:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                        },
                        "value": "ERC20: transfer amount exceeds balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                        }
                      ],
                      "id": 332,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7528:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 337,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7528:74:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 338,
                  "nodeType": "ExpressionStatement",
                  "src": "7528:74:0"
                },
                {
                  "expression": {
                    "id": 345,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 339,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35,
                        "src": "7612:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 341,
                      "indexExpression": {
                        "id": 340,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 293,
                        "src": "7622:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7612:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 344,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 342,
                        "name": "senderBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 327,
                        "src": "7632:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "id": 343,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 297,
                        "src": "7648:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7632:22:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7612:42:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 346,
                  "nodeType": "ExpressionStatement",
                  "src": "7612:42:0"
                },
                {
                  "expression": {
                    "id": 351,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 347,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35,
                        "src": "7664:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 349,
                      "indexExpression": {
                        "id": 348,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 295,
                        "src": "7674:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7664:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 350,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 297,
                      "src": "7688:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7664:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 352,
                  "nodeType": "ExpressionStatement",
                  "src": "7664:30:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 354,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 293,
                        "src": "7719:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 355,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 295,
                        "src": "7727:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 356,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 297,
                        "src": "7738:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 353,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 594,
                      "src": "7710:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 357,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7710:35:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 358,
                  "nodeType": "EmitStatement",
                  "src": "7705:40:0"
                }
              ]
            },
            "documentation": {
              "id": 291,
              "nodeType": "StructuredDocumentation",
              "src": "6692:463:0",
              "text": " @dev Moves tokens `amount` from `sender` to `recipient`.\n This is internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `sender` cannot be the zero address.\n - `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`."
            },
            "id": 360,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transfer",
            "nameLocation": "7169:9:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 298,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 293,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "7187:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 360,
                  "src": "7179:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 292,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7179:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 295,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "7203:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 360,
                  "src": "7195:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 294,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7195:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 297,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "7222:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 360,
                  "src": "7214:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 296,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7214:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7178:51:0"
            },
            "returnParameters": {
              "id": 299,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7247:0:0"
            },
            "scope": 526,
            "src": "7160:592:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 406,
              "nodeType": "Block",
              "src": "8088:265:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 374,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 369,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 363,
                          "src": "8106:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 372,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8125:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 371,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8117:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 370,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "8117:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 373,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8117:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "8106:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
                        "id": 375,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8129:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        },
                        "value": "ERC20: mint to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        }
                      ],
                      "id": 368,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8098:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 376,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8098:65:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 377,
                  "nodeType": "ExpressionStatement",
                  "src": "8098:65:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 381,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8203:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 380,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8195:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 379,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8195:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 382,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8195:10:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 383,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 363,
                        "src": "8207:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 384,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 365,
                        "src": "8216:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 378,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 525,
                      "src": "8174:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 385,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8174:49:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 386,
                  "nodeType": "ExpressionStatement",
                  "src": "8174:49:0"
                },
                {
                  "expression": {
                    "id": 389,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 387,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 43,
                      "src": "8234:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 388,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 365,
                      "src": "8250:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8234:22:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 390,
                  "nodeType": "ExpressionStatement",
                  "src": "8234:22:0"
                },
                {
                  "expression": {
                    "id": 395,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 391,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35,
                        "src": "8266:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 393,
                      "indexExpression": {
                        "id": 392,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 363,
                        "src": "8276:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8266:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 394,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 365,
                      "src": "8288:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8266:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 396,
                  "nodeType": "ExpressionStatement",
                  "src": "8266:28:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 400,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8326:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 399,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8318:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 398,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8318:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 401,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8318:10:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 402,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 363,
                        "src": "8330:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 403,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 365,
                        "src": "8339:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 397,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 594,
                      "src": "8309:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 404,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8309:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 405,
                  "nodeType": "EmitStatement",
                  "src": "8304:42:0"
                }
              ]
            },
            "documentation": {
              "id": 361,
              "nodeType": "StructuredDocumentation",
              "src": "7758:260:0",
              "text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `to` cannot be the zero address."
            },
            "id": 407,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_mint",
            "nameLocation": "8032:5:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 366,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 363,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "8046:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 407,
                  "src": "8038:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 362,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8038:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 365,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "8063:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 407,
                  "src": "8055:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 364,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8055:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8037:33:0"
            },
            "returnParameters": {
              "id": 367,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8088:0:0"
            },
            "scope": 526,
            "src": "8023:330:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 468,
              "nodeType": "Block",
              "src": "8738:418:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 421,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 416,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 410,
                          "src": "8756:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 419,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8775:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 418,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8767:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 417,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "8767:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 420,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8767:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "8756:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
                        "id": 422,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8779:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        },
                        "value": "ERC20: burn from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        }
                      ],
                      "id": 415,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8748:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8748:67:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 424,
                  "nodeType": "ExpressionStatement",
                  "src": "8748:67:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 426,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 410,
                        "src": "8847:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 429,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8864:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 428,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8856:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 427,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8856:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 430,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8856:10:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 431,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 412,
                        "src": "8868:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 425,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 525,
                      "src": "8826:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 432,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8826:49:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 433,
                  "nodeType": "ExpressionStatement",
                  "src": "8826:49:0"
                },
                {
                  "assignments": [
                    435
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 435,
                      "mutability": "mutable",
                      "name": "accountBalance",
                      "nameLocation": "8894:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 468,
                      "src": "8886:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 434,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8886:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 439,
                  "initialValue": {
                    "baseExpression": {
                      "id": 436,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 35,
                      "src": "8911:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 438,
                    "indexExpression": {
                      "id": 437,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 410,
                      "src": "8921:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "8911:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8886:43:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 443,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 441,
                          "name": "accountBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 435,
                          "src": "8947:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 442,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 412,
                          "src": "8965:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8947:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
                        "id": 444,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8973:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                          "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                        },
                        "value": "ERC20: burn amount exceeds balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                          "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                        }
                      ],
                      "id": 440,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8939:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 445,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8939:71:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 446,
                  "nodeType": "ExpressionStatement",
                  "src": "8939:71:0"
                },
                {
                  "expression": {
                    "id": 453,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 447,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35,
                        "src": "9020:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 449,
                      "indexExpression": {
                        "id": 448,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 410,
                        "src": "9030:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9020:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 452,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 450,
                        "name": "accountBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 435,
                        "src": "9041:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "id": 451,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 412,
                        "src": "9058:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "9041:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9020:44:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 454,
                  "nodeType": "ExpressionStatement",
                  "src": "9020:44:0"
                },
                {
                  "expression": {
                    "id": 457,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 455,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 43,
                      "src": "9074:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 456,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 412,
                      "src": "9090:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9074:22:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 458,
                  "nodeType": "ExpressionStatement",
                  "src": "9074:22:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 460,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 410,
                        "src": "9121:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 463,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9138:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 462,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9130:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 461,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9130:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 464,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9130:10:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 465,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 412,
                        "src": "9142:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 459,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 594,
                      "src": "9112:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 466,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9112:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 467,
                  "nodeType": "EmitStatement",
                  "src": "9107:42:0"
                }
              ]
            },
            "documentation": {
              "id": 408,
              "nodeType": "StructuredDocumentation",
              "src": "8359:309:0",
              "text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
            },
            "id": 469,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nameLocation": "8682:5:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 413,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 410,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "8696:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 469,
                  "src": "8688:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 409,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8688:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 412,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "8713:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 469,
                  "src": "8705:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 411,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8705:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8687:33:0"
            },
            "returnParameters": {
              "id": 414,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8738:0:0"
            },
            "scope": 526,
            "src": "8673:483:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 513,
              "nodeType": "Block",
              "src": "9662:257:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 485,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 480,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 472,
                          "src": "9680:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 483,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9697:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 482,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "9689:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 481,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "9689:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 484,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9689:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "9680:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
                        "id": 486,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9701:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        },
                        "value": "ERC20: approve from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        }
                      ],
                      "id": 479,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9672:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 487,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9672:68:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 488,
                  "nodeType": "ExpressionStatement",
                  "src": "9672:68:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 495,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 490,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 474,
                          "src": "9758:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 493,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9777:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 492,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "9769:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 491,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "9769:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 494,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9769:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "9758:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
                        "id": 496,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9781:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        },
                        "value": "ERC20: approve to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        }
                      ],
                      "id": 489,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9750:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 497,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9750:68:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 498,
                  "nodeType": "ExpressionStatement",
                  "src": "9750:68:0"
                },
                {
                  "expression": {
                    "id": 505,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 499,
                          "name": "_allowances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 41,
                          "src": "9829:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(address => mapping(address => uint256))"
                          }
                        },
                        "id": 502,
                        "indexExpression": {
                          "id": 500,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 472,
                          "src": "9841:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "9829:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 503,
                      "indexExpression": {
                        "id": 501,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 474,
                        "src": "9848:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9829:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 504,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 476,
                      "src": "9859:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9829:36:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 506,
                  "nodeType": "ExpressionStatement",
                  "src": "9829:36:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 508,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 472,
                        "src": "9889:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 509,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 474,
                        "src": "9896:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 510,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 476,
                        "src": "9905:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 507,
                      "name": "Approval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 603,
                      "src": "9880:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 511,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9880:32:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 512,
                  "nodeType": "EmitStatement",
                  "src": "9875:37:0"
                }
              ]
            },
            "documentation": {
              "id": 470,
              "nodeType": "StructuredDocumentation",
              "src": "9162:412:0",
              "text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
            },
            "id": 514,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_approve",
            "nameLocation": "9588:8:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 477,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 472,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "9605:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 514,
                  "src": "9597:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 471,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9597:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 474,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "9620:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 514,
                  "src": "9612:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 473,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9612:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 476,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "9637:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 514,
                  "src": "9629:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 475,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9629:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9596:48:0"
            },
            "returnParameters": {
              "id": 478,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9662:0:0"
            },
            "scope": 526,
            "src": "9579:340:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 524,
              "nodeType": "Block",
              "src": "10595:3:0",
              "statements": []
            },
            "documentation": {
              "id": 515,
              "nodeType": "StructuredDocumentation",
              "src": "9925:576:0",
              "text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be to transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
            },
            "id": 525,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nameLocation": "10515:20:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 522,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 517,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "10544:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 525,
                  "src": "10536:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 516,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10536:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 519,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "10558:2:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 525,
                  "src": "10550:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 518,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10550:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 521,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "10570:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 525,
                  "src": "10562:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 520,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10562:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10535:42:0"
            },
            "returnParameters": {
              "id": 523,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10595:0:0"
            },
            "scope": 526,
            "src": "10506:92:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 527,
        "src": "1321:9279:0",
        "usedErrors": []
      }
    ],
    "src": "33:10568:0"
  },
  "bytecode": "60806040523480156200001157600080fd5b5060405162000b8238038062000b828339810160408190526200003491620001db565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000282565b828054620000769062000245565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010e565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010e565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b60008060408385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b620002158683870162000124565b935060208501519150808211156200022c57600080fd5b506200023b8582860162000124565b9150509250929050565b600181811c908216806200025a57607f821691505b602082108114156200027c57634e487b7160e01b600052602260045260246000fd5b50919050565b6108f080620002926000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c3919061070e565b60405180910390f35b6100df6100da36600461077f565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107a9565b61026e565b604051601281526020016100c3565b6100df61013136600461077f565b610324565b6100f36101443660046107e5565b6001600160a01b031660009081526020819052604090205490565b6100b661035b565b6100df61017536600461077f565b61036a565b6100df61018836600461077f565b610405565b6100f361019b366004610807565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d59061083a565b80601f01602080910402602001604051908101604052809291908181526020018280546102019061083a565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b6000610265338484610412565b50600192915050565b600061027b848484610536565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103055760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103198533610314868561088b565b610412565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102659185906103149086906108a2565b6060600480546101d59061083a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103ec5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102fc565b6103fb3385610314868561088b565b5060019392505050565b6000610265338484610536565b6001600160a01b0383166104745760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102fc565b6001600160a01b0382166104d55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102fc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661059a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102fc565b6001600160a01b0382166105fc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102fc565b6001600160a01b038316600090815260208190526040902054818110156106745760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102fc565b61067e828261088b565b6001600160a01b0380861660009081526020819052604080822093909355908516815290812080548492906106b49084906108a2565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161070091815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561073b5785810183015185820160400152820161071f565b8181111561074d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461077a57600080fd5b919050565b6000806040838503121561079257600080fd5b61079b83610763565b946020939093013593505050565b6000806000606084860312156107be57600080fd5b6107c784610763565b92506107d560208501610763565b9150604084013590509250925092565b6000602082840312156107f757600080fd5b61080082610763565b9392505050565b6000806040838503121561081a57600080fd5b61082383610763565b915061083160208401610763565b90509250929050565b600181811c9082168061084e57607f821691505b6020821081141561086f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561089d5761089d610875565b500390565b600082198211156108b5576108b5610875565b50019056fea26469706673582212200f110a83dbfe19875863c680102202742b889ef917015ec6ba2b19af4452bf9d64736f6c634300080b0033",
  "bytecodeSha1": "232bd80ba89d0d5e45927ddcdb15ad97942b2df4",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.11+commit.d7f03943"
  },
  "contractName": "ERC20",
  "coverageMap": {
    "branches": {
      "0": {
        "ERC20._approve": {
          "30": [
            9680,
            9699,
            true
          ],
          "31": [
            9758,
            9779,
            true
          ]
        },
        "ERC20._transfer": {
          "32": [
            7265,
            7285,
            true
          ],
          "33": [
            7345,
            7368,
            true
          ],
          "34": [
            7536,
            7559,
            true
          ]
        },
        "ERC20.decreaseAllowance": {
          "29": [
            6503,
            6538,
            true
          ]
        },
        "ERC20.transferFrom": {
          "28": [
            5054,
            5080,
            true
          ]
        }
      },
      "1": {},
      "2": {},
      "3": {}
    },
    "statements": {
      "0": {
        "ERC20._approve": {
          "18": [
            9672,
            9740
          ],
          "19": [
            9750,
            9818
          ],
          "20": [
            9829,
            9865
          ],
          "21": [
            9875,
            9912
          ]
        },
        "ERC20._transfer": {
          "22": [
            7257,
            7327
          ],
          "23": [
            7337,
            7408
          ],
          "24": [
            7528,
            7602
          ],
          "25": [
            7612,
            7654
          ],
          "26": [
            7664,
            7694
          ],
          "27": [
            7705,
            7745
          ]
        },
        "ERC20.allowance": {
          "3": [
            3995,
            4029
          ]
        },
        "ERC20.approve": {
          "5": [
            4273,
            4312
          ],
          "7": [
            4322,
            4333
          ]
        },
        "ERC20.balanceOf": {
          "2": [
            3422,
            3447
          ]
        },
        "ERC20.decimals": {
          "1": [
            3089,
            3098
          ]
        },
        "ERC20.decreaseAllowance": {
          "14": [
            6495,
            6580
          ],
          "15": [
            6590,
            6657
          ],
          "16": [
            6668,
            6679
          ]
        },
        "ERC20.increaseAllowance": {
          "12": [
            5720,
            5800
          ]
        },
        "ERC20.name": {
          "4": [
            2156,
            2168
          ]
        },
        "ERC20.symbol": {
          "13": [
            2369,
            2383
          ]
        },
        "ERC20.totalSupply": {
          "0": [
            3245,
            3264
          ]
        },
        "ERC20.transfer": {
          "17": [
            3759,
            3801
          ]
        },
        "ERC20.transferFrom": {
          "8": [
            4929,
            4965
          ],
          "9": [
            5046,
            5125
          ],
          "10": [
            5135,
            5192
          ],
          "11": [
            5203,
            5214
          ]
        }
      },
      "1": {},
      "2": {},
      "3": {
        "Context._msgSender": {
          "6": [
            658,
            675
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.1.0/Context",
    "OpenZeppelin/openzeppelin-contracts@4.1.0/IERC20",
    "OpenZeppelin/openzeppelin-contracts@4.1.0/IERC20Metadata"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c3919061070e565b60405180910390f35b6100df6100da36600461077f565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107a9565b61026e565b604051601281526020016100c3565b6100df61013136600461077f565b610324565b6100f36101443660046107e5565b6001600160a01b031660009081526020819052604090205490565b6100b661035b565b6100df61017536600461077f565b61036a565b6100df61018836600461077f565b610405565b6100f361019b366004610807565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d59061083a565b80601f01602080910402602001604051908101604052809291908181526020018280546102019061083a565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b6000610265338484610412565b50600192915050565b600061027b848484610536565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103055760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103198533610314868561088b565b610412565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102659185906103149086906108a2565b6060600480546101d59061083a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103ec5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102fc565b6103fb3385610314868561088b565b5060019392505050565b6000610265338484610536565b6001600160a01b0383166104745760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102fc565b6001600160a01b0382166104d55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102fc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661059a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102fc565b6001600160a01b0382166105fc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102fc565b6001600160a01b038316600090815260208190526040902054818110156106745760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102fc565b61067e828261088b565b6001600160a01b0380861660009081526020819052604080822093909355908516815290812080548492906106b49084906108a2565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161070091815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561073b5785810183015185820160400152820161071f565b8181111561074d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461077a57600080fd5b919050565b6000806040838503121561079257600080fd5b61079b83610763565b946020939093013593505050565b6000806000606084860312156107be57600080fd5b6107c784610763565b92506107d560208501610763565b9150604084013590509250925092565b6000602082840312156107f757600080fd5b61080082610763565b9392505050565b6000806040838503121561081a57600080fd5b61082383610763565b915061083160208401610763565b90509250929050565b600181811c9082168061084e57607f821691505b6020821081141561086f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561089d5761089d610875565b500390565b600082198211156108b5576108b5610875565b50019056fea26469706673582212200f110a83dbfe19875863c680102202742b889ef917015ec6ba2b19af4452bf9d64736f6c634300080b0033",
  "deployedSourceMap": "1321:9279:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2077:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4174:166;;;;;;:::i;:::-;;:::i;:::-;;;1218:14:5;;1211:22;1193:41;;1181:2;1166:18;4174:166:0;1053:187:5;3165:106:0;3252:12;;3165:106;;;1391:25:5;;;1379:2;1364:18;3165:106:0;1245:177:5;4807:414:0;;;;;;:::i;:::-;;:::i;3014:91::-;;;3096:2;1902:36:5;;1890:2;1875:18;3014:91:0;1760:184:5;5616:212:0;;;;;;:::i;:::-;;:::i;3329:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3429:18:0;3403:7;3429:18;;;;;;;;;;;;3329:125;2288:102;;;:::i;6315:371::-;;;;;;:::i;:::-;;:::i;3657:172::-;;;;;;:::i;:::-;;:::i;3887:149::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4002:18:0;;;3976:7;4002:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3887:149;2077:98;2131:13;2163:5;2156:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2077:98;:::o;4174:166::-;4257:4;4273:39;665:10:3;4296:7:0;4305:6;4273:8;:39::i;:::-;-1:-1:-1;4329:4:0;4174:166;;;;:::o;4807:414::-;4913:4;4929:36;4939:6;4947:9;4958:6;4929:9;:36::i;:::-;-1:-1:-1;;;;;5003:19:0;;4976:24;5003:19;;;:11;:19;;;;;;;;665:10:3;5003:33:0;;;;;;;;5054:26;;;;5046:79;;;;-1:-1:-1;;;5046:79:0;;2992:2:5;5046:79:0;;;2974:21:5;3031:2;3011:18;;;3004:30;3070:34;3050:18;;;3043:62;-1:-1:-1;;;3121:18:5;;;3114:38;3169:19;;5046:79:0;;;;;;;;;5135:57;5144:6;665:10:3;5166:25:0;5185:6;5166:16;:25;:::i;:::-;5135:8;:57::i;:::-;-1:-1:-1;5210:4:0;;4807:414;-1:-1:-1;;;;4807:414:0:o;5616:212::-;665:10:3;5704:4:0;5752:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;5752:34:0;;;;;;;;;;5704:4;;5720:80;;5743:7;;5752:47;;5789:10;;5752:47;:::i;2288:102::-;2344:13;2376:7;2369:14;;;;;:::i;6315:371::-;665:10:3;6408:4:0;6451:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;6451:34:0;;;;;;;;;;6503:35;;;;6495:85;;;;-1:-1:-1;;;6495:85:0;;3796:2:5;6495:85:0;;;3778:21:5;3835:2;3815:18;;;3808:30;3874:34;3854:18;;;3847:62;-1:-1:-1;;;3925:18:5;;;3918:35;3970:19;;6495:85:0;3594:401:5;6495:85:0;6590:67;665:10:3;6613:7:0;6622:34;6641:15;6622:16;:34;:::i;6590:67::-;-1:-1:-1;6675:4:0;;6315:371;-1:-1:-1;;;6315:371:0:o;3657:172::-;3743:4;3759:42;665:10:3;3783:9:0;3794:6;3759:9;:42::i;9579:340::-;-1:-1:-1;;;;;9680:19:0;;9672:68;;;;-1:-1:-1;;;9672:68:0;;4202:2:5;9672:68:0;;;4184:21:5;4241:2;4221:18;;;4214:30;4280:34;4260:18;;;4253:62;-1:-1:-1;;;4331:18:5;;;4324:34;4375:19;;9672:68:0;4000:400:5;9672:68:0;-1:-1:-1;;;;;9758:21:0;;9750:68;;;;-1:-1:-1;;;9750:68:0;;4607:2:5;9750:68:0;;;4589:21:5;4646:2;4626:18;;;4619:30;4685:34;4665:18;;;4658:62;-1:-1:-1;;;4736:18:5;;;4729:32;4778:19;;9750:68:0;4405:398:5;9750:68:0;-1:-1:-1;;;;;9829:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;9880:32;;1391:25:5;;;9880:32:0;;1364:18:5;9880:32:0;;;;;;;9579:340;;;:::o;7160:592::-;-1:-1:-1;;;;;7265:20:0;;7257:70;;;;-1:-1:-1;;;7257:70:0;;5010:2:5;7257:70:0;;;4992:21:5;5049:2;5029:18;;;5022:30;5088:34;5068:18;;;5061:62;-1:-1:-1;;;5139:18:5;;;5132:35;5184:19;;7257:70:0;4808:401:5;7257:70:0;-1:-1:-1;;;;;7345:23:0;;7337:71;;;;-1:-1:-1;;;7337:71:0;;5416:2:5;7337:71:0;;;5398:21:5;5455:2;5435:18;;;5428:30;5494:34;5474:18;;;5467:62;-1:-1:-1;;;5545:18:5;;;5538:33;5588:19;;7337:71:0;5214:399:5;7337:71:0;-1:-1:-1;;;;;7501:17:0;;7477:21;7501:17;;;;;;;;;;;7536:23;;;;7528:74;;;;-1:-1:-1;;;7528:74:0;;5820:2:5;7528:74:0;;;5802:21:5;5859:2;5839:18;;;5832:30;5898:34;5878:18;;;5871:62;-1:-1:-1;;;5949:18:5;;;5942:36;5995:19;;7528:74:0;5618:402:5;7528:74:0;7632:22;7648:6;7632:13;:22;:::i;:::-;-1:-1:-1;;;;;7612:17:0;;;:9;:17;;;;;;;;;;;:42;;;;7664:20;;;;;;;;:30;;7688:6;;7612:9;7664:30;;7688:6;;7664:30;:::i;:::-;;;;;;;;7727:9;-1:-1:-1;;;;;7710:35:0;7719:6;-1:-1:-1;;;;;7710:35:0;;7738:6;7710:35;;;;1391:25:5;;1379:2;1364:18;;1245:177;7710:35:0;;;;;;;;7247:505;7160:592;;;:::o;14:597:5:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:5;574:15;-1:-1:-1;;570:29:5;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:5:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:5;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:254::-;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;962:29;981:9;962:29;:::i;:::-;952:39;1038:2;1023:18;;;;1010:32;;-1:-1:-1;;;794:254:5:o;1427:328::-;1504:6;1512;1520;1573:2;1561:9;1552:7;1548:23;1544:32;1541:52;;;1589:1;1586;1579:12;1541:52;1612:29;1631:9;1612:29;:::i;:::-;1602:39;;1660:38;1694:2;1683:9;1679:18;1660:38;:::i;:::-;1650:48;;1745:2;1734:9;1730:18;1717:32;1707:42;;1427:328;;;;;:::o;1949:186::-;2008:6;2061:2;2049:9;2040:7;2036:23;2032:32;2029:52;;;2077:1;2074;2067:12;2029:52;2100:29;2119:9;2100:29;:::i;:::-;2090:39;1949:186;-1:-1:-1;;;1949:186:5:o;2140:260::-;2208:6;2216;2269:2;2257:9;2248:7;2244:23;2240:32;2237:52;;;2285:1;2282;2275:12;2237:52;2308:29;2327:9;2308:29;:::i;:::-;2298:39;;2356:38;2390:2;2379:9;2375:18;2356:38;:::i;:::-;2346:48;;2140:260;;;;;:::o;2405:380::-;2484:1;2480:12;;;;2527;;;2548:61;;2602:4;2594:6;2590:17;2580:27;;2548:61;2655:2;2647:6;2644:14;2624:18;2621:38;2618:161;;;2701:10;2696:3;2692:20;2689:1;2682:31;2736:4;2733:1;2726:15;2764:4;2761:1;2754:15;2618:161;;2405:380;;;:::o;3199:127::-;3260:10;3255:3;3251:20;3248:1;3241:31;3291:4;3288:1;3281:15;3315:4;3312:1;3305:15;3331:125;3371:4;3399:1;3396;3393:8;3390:34;;;3404:18;;:::i;:::-;-1:-1:-1;3441:9:5;;3331:125::o;3461:128::-;3501:3;3532:1;3528:6;3525:1;3522:13;3519:39;;;3538:18;;:::i;:::-;-1:-1:-1;3574:9:5;;3461:128::o",
  "language": "Solidity",
  "natspec": {
    "details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "details": "Sets the values for {name} and {symbol}. The defaut value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "offset": [
    1321,
    10600
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x70E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x77F JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x7A9 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x77F JUMP JUMPDEST PUSH2 0x324 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x7E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x35B JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x77F JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x77F JUMP JUMPDEST PUSH2 0x405 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x807 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x83A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x201 SWAP1 PUSH2 0x83A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x223 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x24E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x231 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265 CALLER DUP5 DUP5 PUSH2 0x412 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27B DUP5 DUP5 DUP5 PUSH2 0x536 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x305 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x319 DUP6 CALLER PUSH2 0x314 DUP7 DUP6 PUSH2 0x88B JUMP JUMPDEST PUSH2 0x412 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x265 SWAP2 DUP6 SWAP1 PUSH2 0x314 SWAP1 DUP7 SWAP1 PUSH2 0x8A2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x83A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x3EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH2 0x3FB CALLER DUP6 PUSH2 0x314 DUP7 DUP6 PUSH2 0x88B JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265 CALLER DUP5 DUP5 PUSH2 0x536 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x474 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x59A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x674 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH2 0x67E DUP3 DUP3 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6B4 SWAP1 DUP5 SWAP1 PUSH2 0x8A2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x700 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x73B JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x71F JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x74D JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x77A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x792 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x79B DUP4 PUSH2 0x763 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7C7 DUP5 PUSH2 0x763 JUMP JUMPDEST SWAP3 POP PUSH2 0x7D5 PUSH1 0x20 DUP6 ADD PUSH2 0x763 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x800 DUP3 PUSH2 0x763 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x81A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x823 DUP4 PUSH2 0x763 JUMP JUMPDEST SWAP2 POP PUSH2 0x831 PUSH1 0x20 DUP5 ADD PUSH2 0x763 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x84E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x86F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x89D JUMPI PUSH2 0x89D PUSH2 0x875 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x8B5 JUMPI PUSH2 0x8B5 PUSH2 0x875 JUMP JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF GT EXP DUP4 0xDB INVALID NOT DUP8 PC PUSH4 0xC6801022 MUL PUSH21 0x2B889EF917015EC6BA2B19AF4452BF9D64736F6C63 NUMBER STOP ADDMOD SIGNEXTEND STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "6": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "7": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "12": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "REVERT",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "17": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "POP",
      "path": "0"
    },
    "18": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "21": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "LT",
      "path": "0"
    },
    "22": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA9"
    },
    "25": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "29": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "SHR",
      "path": "0"
    },
    "32": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "33": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x39509351"
    },
    "38": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "GT",
      "path": "0"
    },
    "39": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "43": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "44": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x39509351"
    },
    "49": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "EQ",
      "path": "0"
    },
    "50": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "53": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "54": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "55": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70A08231"
    },
    "60": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "EQ",
      "path": "0"
    },
    "61": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x136"
    },
    "64": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "65": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "66": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x95D89B41"
    },
    "71": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "EQ",
      "path": "0"
    },
    "72": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15F"
    },
    "75": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "76": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "77": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA457C2D7"
    },
    "82": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "EQ",
      "path": "0"
    },
    "83": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x167"
    },
    "86": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "87": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "88": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA9059CBB"
    },
    "93": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "EQ",
      "path": "0"
    },
    "94": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x17A"
    },
    "97": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "98": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "99": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xDD62ED3E"
    },
    "104": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "EQ",
      "path": "0"
    },
    "105": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18D"
    },
    "108": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "109": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "112": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "REVERT",
      "path": "0"
    },
    "113": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "114": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "115": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x6FDDE03"
    },
    "120": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "EQ",
      "path": "0"
    },
    "121": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAE"
    },
    "124": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "125": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "126": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x95EA7B3"
    },
    "131": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "EQ",
      "path": "0"
    },
    "132": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCC"
    },
    "135": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "136": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "137": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x18160DDD"
    },
    "142": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "EQ",
      "path": "0"
    },
    "143": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEF"
    },
    "146": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "147": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "148": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x23B872DD"
    },
    "153": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "EQ",
      "path": "0"
    },
    "154": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x101"
    },
    "157": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "158": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "159": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x313CE567"
    },
    "164": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "EQ",
      "path": "0"
    },
    "165": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x114"
    },
    "168": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "169": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "170": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "172": {
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "DUP1",
      "path": "0"
    },
    "173": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1321,
        10600
      ],
      "op": "REVERT",
      "path": "0"
    },
    "174": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "175": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB6"
    },
    "178": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C6"
    },
    "181": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2077,
        2175
      ],
      "op": "JUMP",
      "path": "0"
    },
    "182": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "183": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "185": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "186": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC3"
    },
    "189": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "190": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "191": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x70E"
    },
    "194": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2077,
        2175
      ],
      "op": "JUMP",
      "path": "0"
    },
    "195": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "196": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "198": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "199": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "DUP1",
      "path": "0"
    },
    "200": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "201": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "SUB",
      "path": "0"
    },
    "202": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "203": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "RETURN",
      "path": "0"
    },
    "204": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "205": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDF"
    },
    "208": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDA"
    },
    "211": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "212": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "214": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x77F"
    },
    "217": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4174,
        4340
      ],
      "op": "JUMP",
      "path": "0"
    },
    "218": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "219": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x258"
    },
    "222": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4174,
        4340
      ],
      "op": "JUMP",
      "path": "0"
    },
    "223": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "224": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "226": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "227": {
      "op": "SWAP1"
    },
    "228": {
      "op": "ISZERO"
    },
    "229": {
      "op": "ISZERO"
    },
    "230": {
      "op": "DUP2"
    },
    "231": {
      "op": "MSTORE"
    },
    "232": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "234": {
      "op": "ADD"
    },
    "235": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC3"
    },
    "238": {
      "op": "JUMP"
    },
    "239": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3165,
        3271
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "240": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3252,
        3264
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x2"
    },
    "242": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3252,
        3264
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "243": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3165,
        3271
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "244": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3165,
        3271
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "246": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3165,
        3271
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "247": {
      "op": "SWAP1"
    },
    "248": {
      "op": "DUP2"
    },
    "249": {
      "op": "MSTORE"
    },
    "250": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "252": {
      "op": "ADD"
    },
    "253": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3165,
        3271
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC3"
    },
    "256": {
      "op": "JUMP"
    },
    "257": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4807,
        5221
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "258": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4807,
        5221
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDF"
    },
    "261": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4807,
        5221
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10F"
    },
    "264": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4807,
        5221
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "265": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4807,
        5221
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "267": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4807,
        5221
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7A9"
    },
    "270": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4807,
        5221
      ],
      "op": "JUMP",
      "path": "0"
    },
    "271": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4807,
        5221
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "272": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4807,
        5221
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x26E"
    },
    "275": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4807,
        5221
      ],
      "op": "JUMP",
      "path": "0"
    },
    "276": {
      "fn": "ERC20.decimals",
      "offset": [
        3014,
        3105
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "277": {
      "fn": "ERC20.decimals",
      "offset": [
        3014,
        3105
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "279": {
      "fn": "ERC20.decimals",
      "offset": [
        3014,
        3105
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "280": {
      "fn": "ERC20.decimals",
      "offset": [
        3096,
        3098
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 1,
      "value": "0x12"
    },
    "282": {
      "op": "DUP2"
    },
    "283": {
      "op": "MSTORE"
    },
    "284": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "286": {
      "op": "ADD"
    },
    "287": {
      "fn": "ERC20.decimals",
      "offset": [
        3014,
        3105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC3"
    },
    "290": {
      "op": "JUMP"
    },
    "291": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5616,
        5828
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "292": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5616,
        5828
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDF"
    },
    "295": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5616,
        5828
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x131"
    },
    "298": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5616,
        5828
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "299": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5616,
        5828
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "301": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5616,
        5828
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x77F"
    },
    "304": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5616,
        5828
      ],
      "op": "JUMP",
      "path": "0"
    },
    "305": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5616,
        5828
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "306": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5616,
        5828
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x324"
    },
    "309": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5616,
        5828
      ],
      "op": "JUMP",
      "path": "0"
    },
    "310": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3329,
        3454
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "311": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3329,
        3454
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF3"
    },
    "314": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3329,
        3454
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x144"
    },
    "317": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3329,
        3454
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "318": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3329,
        3454
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "320": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3329,
        3454
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7E5"
    },
    "323": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3329,
        3454
      ],
      "op": "JUMP",
      "path": "0"
    },
    "324": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3329,
        3454
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "327": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "329": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "331": {
      "op": "SHL"
    },
    "332": {
      "op": "SUB"
    },
    "333": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3429,
        3447
      ],
      "op": "AND",
      "path": "0",
      "statement": 2
    },
    "334": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3403,
        3410
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "336": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3429,
        3447
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "337": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3429,
        3447
      ],
      "op": "DUP2",
      "path": "0"
    },
    "338": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3429,
        3447
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "339": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3429,
        3447
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "341": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3429,
        3447
      ],
      "op": "DUP2",
      "path": "0"
    },
    "342": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3429,
        3447
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "343": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3429,
        3447
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "344": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3429,
        3447
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "346": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3429,
        3447
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "347": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3429,
        3447
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "348": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3429,
        3447
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "349": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3429,
        3447
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "350": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3329,
        3454
      ],
      "op": "JUMP",
      "path": "0"
    },
    "351": {
      "fn": "ERC20.symbol",
      "offset": [
        2288,
        2390
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "352": {
      "fn": "ERC20.symbol",
      "offset": [
        2288,
        2390
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB6"
    },
    "355": {
      "fn": "ERC20.symbol",
      "offset": [
        2288,
        2390
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x35B"
    },
    "358": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2288,
        2390
      ],
      "op": "JUMP",
      "path": "0"
    },
    "359": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6315,
        6686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "360": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6315,
        6686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDF"
    },
    "363": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6315,
        6686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x175"
    },
    "366": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6315,
        6686
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "367": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6315,
        6686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "369": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6315,
        6686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x77F"
    },
    "372": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6315,
        6686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "373": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6315,
        6686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "374": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6315,
        6686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x36A"
    },
    "377": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6315,
        6686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "378": {
      "fn": "ERC20.transfer",
      "offset": [
        3657,
        3829
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "379": {
      "fn": "ERC20.transfer",
      "offset": [
        3657,
        3829
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDF"
    },
    "382": {
      "fn": "ERC20.transfer",
      "offset": [
        3657,
        3829
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x188"
    },
    "385": {
      "fn": "ERC20.transfer",
      "offset": [
        3657,
        3829
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "386": {
      "fn": "ERC20.transfer",
      "offset": [
        3657,
        3829
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "388": {
      "fn": "ERC20.transfer",
      "offset": [
        3657,
        3829
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x77F"
    },
    "391": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3657,
        3829
      ],
      "op": "JUMP",
      "path": "0"
    },
    "392": {
      "fn": "ERC20.transfer",
      "offset": [
        3657,
        3829
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "393": {
      "fn": "ERC20.transfer",
      "offset": [
        3657,
        3829
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x405"
    },
    "396": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3657,
        3829
      ],
      "op": "JUMP",
      "path": "0"
    },
    "397": {
      "fn": "ERC20.allowance",
      "offset": [
        3887,
        4036
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "398": {
      "fn": "ERC20.allowance",
      "offset": [
        3887,
        4036
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF3"
    },
    "401": {
      "fn": "ERC20.allowance",
      "offset": [
        3887,
        4036
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19B"
    },
    "404": {
      "fn": "ERC20.allowance",
      "offset": [
        3887,
        4036
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "405": {
      "fn": "ERC20.allowance",
      "offset": [
        3887,
        4036
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "407": {
      "fn": "ERC20.allowance",
      "offset": [
        3887,
        4036
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x807"
    },
    "410": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3887,
        4036
      ],
      "op": "JUMP",
      "path": "0"
    },
    "411": {
      "fn": "ERC20.allowance",
      "offset": [
        3887,
        4036
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "412": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "414": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "416": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "418": {
      "op": "SHL"
    },
    "419": {
      "op": "SUB"
    },
    "420": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "SWAP2",
      "path": "0",
      "statement": 3
    },
    "421": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "DUP3",
      "path": "0"
    },
    "422": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "AND",
      "path": "0"
    },
    "423": {
      "fn": "ERC20.allowance",
      "offset": [
        3976,
        3983
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "425": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "426": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "DUP2",
      "path": "0"
    },
    "427": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "428": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4013
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "430": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "432": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "433": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "DUP2",
      "path": "0"
    },
    "434": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "435": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "437": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "DUP1",
      "path": "0"
    },
    "438": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "DUP4",
      "path": "0"
    },
    "439": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4020
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "440": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4029
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "441": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4029
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "442": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4029
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "443": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4029
      ],
      "op": "AND",
      "path": "0"
    },
    "444": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4029
      ],
      "op": "DUP3",
      "path": "0"
    },
    "445": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4029
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "446": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4029
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "447": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4029
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "448": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4029
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "449": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4029
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "450": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4029
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "451": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4029
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "452": {
      "fn": "ERC20.allowance",
      "offset": [
        4002,
        4029
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "453": {
      "fn": "ERC20.allowance",
      "offset": [
        3887,
        4036
      ],
      "op": "JUMP",
      "path": "0"
    },
    "454": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "455": {
      "fn": "ERC20.name",
      "offset": [
        2131,
        2144
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "457": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 4,
      "value": "0x3"
    },
    "459": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP1",
      "path": "0"
    },
    "460": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "461": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1D5"
    },
    "464": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "465": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x83A"
    },
    "468": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2156,
        2168
      ],
      "op": "JUMP",
      "path": "0"
    },
    "469": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "470": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP1",
      "path": "0"
    },
    "471": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "473": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "ADD",
      "path": "0"
    },
    "474": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "476": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP1",
      "path": "0"
    },
    "477": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "478": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DIV",
      "path": "0"
    },
    "479": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "MUL",
      "path": "0"
    },
    "480": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "482": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "ADD",
      "path": "0"
    },
    "483": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "485": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "486": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "487": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP2",
      "path": "0"
    },
    "488": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "ADD",
      "path": "0"
    },
    "489": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "491": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "492": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP1",
      "path": "0"
    },
    "493": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "494": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "495": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "496": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP2",
      "path": "0"
    },
    "497": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP2",
      "path": "0"
    },
    "498": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "499": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "501": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "ADD",
      "path": "0"
    },
    "502": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP3",
      "path": "0"
    },
    "503": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP1",
      "path": "0"
    },
    "504": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "505": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x201"
    },
    "508": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "509": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x83A"
    },
    "512": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2156,
        2168
      ],
      "op": "JUMP",
      "path": "0"
    },
    "513": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "514": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP1",
      "path": "0"
    },
    "515": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "516": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x24E"
    },
    "519": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "520": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP1",
      "path": "0"
    },
    "521": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "523": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "LT",
      "path": "0"
    },
    "524": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x223"
    },
    "527": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "528": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "531": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP1",
      "path": "0"
    },
    "532": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP4",
      "path": "0"
    },
    "533": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "534": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DIV",
      "path": "0"
    },
    "535": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "MUL",
      "path": "0"
    },
    "536": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP4",
      "path": "0"
    },
    "537": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "538": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "539": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "541": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "ADD",
      "path": "0"
    },
    "542": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "543": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x24E"
    },
    "546": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "JUMP",
      "path": "0"
    },
    "547": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "548": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP3",
      "path": "0"
    },
    "549": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "ADD",
      "path": "0"
    },
    "550": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "551": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "552": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "554": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "555": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "557": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "559": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "560": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "561": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "562": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP2",
      "path": "0"
    },
    "563": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "564": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP2",
      "path": "0"
    },
    "565": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "566": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "567": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "569": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "ADD",
      "path": "0"
    },
    "570": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "571": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "573": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "ADD",
      "path": "0"
    },
    "574": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP1",
      "path": "0"
    },
    "575": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP4",
      "path": "0"
    },
    "576": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "GT",
      "path": "0"
    },
    "577": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x231"
    },
    "580": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "581": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP3",
      "path": "0"
    },
    "582": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "583": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SUB",
      "path": "0"
    },
    "584": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "586": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "AND",
      "path": "0"
    },
    "587": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "DUP3",
      "path": "0"
    },
    "588": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "ADD",
      "path": "0"
    },
    "589": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "590": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "591": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "POP",
      "path": "0"
    },
    "592": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "POP",
      "path": "0"
    },
    "593": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "POP",
      "path": "0"
    },
    "594": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "POP",
      "path": "0"
    },
    "595": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "POP",
      "path": "0"
    },
    "596": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "597": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2168
      ],
      "op": "POP",
      "path": "0"
    },
    "598": {
      "fn": "ERC20.name",
      "offset": [
        2077,
        2175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "599": {
      "fn": "ERC20.name",
      "jump": "o",
      "offset": [
        2077,
        2175
      ],
      "op": "JUMP",
      "path": "0"
    },
    "600": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "601": {
      "fn": "ERC20.approve",
      "offset": [
        4257,
        4261
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "603": {
      "fn": "ERC20.approve",
      "offset": [
        4273,
        4312
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 5,
      "value": "0x265"
    },
    "606": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "3",
      "statement": 6
    },
    "607": {
      "fn": "ERC20.approve",
      "offset": [
        4296,
        4303
      ],
      "op": "DUP5",
      "path": "0"
    },
    "608": {
      "fn": "ERC20.approve",
      "offset": [
        4305,
        4311
      ],
      "op": "DUP5",
      "path": "0"
    },
    "609": {
      "fn": "ERC20.approve",
      "offset": [
        4273,
        4281
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x412"
    },
    "612": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4273,
        4312
      ],
      "op": "JUMP",
      "path": "0"
    },
    "613": {
      "fn": "ERC20.approve",
      "offset": [
        4273,
        4312
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "614": {
      "op": "POP"
    },
    "615": {
      "fn": "ERC20.approve",
      "offset": [
        4329,
        4333
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 7,
      "value": "0x1"
    },
    "617": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "618": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "619": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "POP",
      "path": "0"
    },
    "620": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4340
      ],
      "op": "POP",
      "path": "0"
    },
    "621": {
      "fn": "ERC20.approve",
      "jump": "o",
      "offset": [
        4174,
        4340
      ],
      "op": "JUMP",
      "path": "0"
    },
    "622": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4807,
        5221
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "623": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4913,
        4917
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "625": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4929,
        4965
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 8,
      "value": "0x27B"
    },
    "628": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4939,
        4945
      ],
      "op": "DUP5",
      "path": "0"
    },
    "629": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4947,
        4956
      ],
      "op": "DUP5",
      "path": "0"
    },
    "630": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4958,
        4964
      ],
      "op": "DUP5",
      "path": "0"
    },
    "631": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4929,
        4938
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x536"
    },
    "634": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4929,
        4965
      ],
      "op": "JUMP",
      "path": "0"
    },
    "635": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4929,
        4965
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "636": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "638": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "640": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "642": {
      "op": "SHL"
    },
    "643": {
      "op": "SUB"
    },
    "644": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5022
      ],
      "op": "DUP5",
      "path": "0"
    },
    "645": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5022
      ],
      "op": "AND",
      "path": "0"
    },
    "646": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4976,
        5000
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "648": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5022
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "649": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5022
      ],
      "op": "DUP2",
      "path": "0"
    },
    "650": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5022
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "651": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5014
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "653": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5022
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "655": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5022
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "656": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5022
      ],
      "op": "DUP2",
      "path": "0"
    },
    "657": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5022
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "658": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5022
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "660": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5022
      ],
      "op": "DUP1",
      "path": "0"
    },
    "661": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5022
      ],
      "op": "DUP4",
      "path": "0"
    },
    "662": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5022
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "663": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "3"
    },
    "664": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5036
      ],
      "op": "DUP5",
      "path": "0"
    },
    "665": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5036
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "666": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5036
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "667": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5036
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "668": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5036
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "669": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5036
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "670": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5036
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "671": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5036
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "672": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5054,
        5080
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 9
    },
    "673": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5054,
        5080
      ],
      "op": "DUP2",
      "path": "0"
    },
    "674": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5054,
        5080
      ],
      "op": "LT",
      "path": "0"
    },
    "675": {
      "branch": 28,
      "fn": "ERC20.transferFrom",
      "offset": [
        5054,
        5080
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "676": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x305"
    },
    "679": {
      "branch": 28,
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "680": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "682": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "683": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "687": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "689": {
      "op": "SHL"
    },
    "690": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "DUP2",
      "path": "0"
    },
    "691": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "692": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "694": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "696": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "DUP3",
      "path": "0"
    },
    "697": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "ADD",
      "path": "0"
    },
    "698": {
      "op": "MSTORE"
    },
    "699": {
      "op": "PUSH1",
      "value": "0x28"
    },
    "701": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "703": {
      "op": "DUP3"
    },
    "704": {
      "op": "ADD"
    },
    "705": {
      "op": "MSTORE"
    },
    "706": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732061"
    },
    "739": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "741": {
      "op": "DUP3"
    },
    "742": {
      "op": "ADD"
    },
    "743": {
      "op": "MSTORE"
    },
    "744": {
      "op": "PUSH8",
      "value": "0x6C6C6F77616E6365"
    },
    "753": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "755": {
      "op": "SHL"
    },
    "756": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "758": {
      "op": "DUP3"
    },
    "759": {
      "op": "ADD"
    },
    "760": {
      "op": "MSTORE"
    },
    "761": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "763": {
      "op": "ADD"
    },
    "764": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "765": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "767": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "768": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "DUP1",
      "path": "0"
    },
    "769": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "770": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "SUB",
      "path": "0"
    },
    "771": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "772": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "773": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5046,
        5125
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "774": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5135,
        5192
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 10,
      "value": "0x319"
    },
    "777": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5144,
        5150
      ],
      "op": "DUP6",
      "path": "0"
    },
    "778": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "3"
    },
    "779": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5166,
        5191
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x314"
    },
    "782": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5185,
        5191
      ],
      "op": "DUP7",
      "path": "0"
    },
    "783": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5166,
        5182
      ],
      "op": "DUP6",
      "path": "0"
    },
    "784": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5166,
        5191
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x88B"
    },
    "787": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5166,
        5191
      ],
      "op": "JUMP",
      "path": "0"
    },
    "788": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5166,
        5191
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "789": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5135,
        5143
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x412"
    },
    "792": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5135,
        5192
      ],
      "op": "JUMP",
      "path": "0"
    },
    "793": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5135,
        5192
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "794": {
      "op": "POP"
    },
    "795": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5210,
        5214
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 11,
      "value": "0x1"
    },
    "797": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5210,
        5214
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "798": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4807,
        5221
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "799": {
      "op": "POP"
    },
    "800": {
      "op": "POP"
    },
    "801": {
      "op": "POP"
    },
    "802": {
      "op": "POP"
    },
    "803": {
      "fn": "ERC20.transferFrom",
      "jump": "o",
      "offset": [
        4807,
        5221
      ],
      "op": "JUMP",
      "path": "0"
    },
    "804": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5616,
        5828
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "805": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "3"
    },
    "806": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5704,
        5708
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "808": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5777
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 12
    },
    "809": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5777
      ],
      "op": "DUP2",
      "path": "0"
    },
    "810": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5777
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "811": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5763
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "813": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5777
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "815": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5777
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "816": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5777
      ],
      "op": "DUP2",
      "path": "0"
    },
    "817": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5777
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "818": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5777
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "820": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5777
      ],
      "op": "DUP1",
      "path": "0"
    },
    "821": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5777
      ],
      "op": "DUP4",
      "path": "0"
    },
    "822": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5777
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "823": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "825": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "827": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "829": {
      "op": "SHL"
    },
    "830": {
      "op": "SUB"
    },
    "831": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5786
      ],
      "op": "DUP8",
      "path": "0"
    },
    "832": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5786
      ],
      "op": "AND",
      "path": "0"
    },
    "833": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5786
      ],
      "op": "DUP5",
      "path": "0"
    },
    "834": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5786
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "835": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5786
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "836": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5786
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "837": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5786
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "838": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5786
      ],
      "op": "DUP2",
      "path": "0"
    },
    "839": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5786
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "840": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5786
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "841": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5704,
        5708
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "842": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5704,
        5708
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "843": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5720,
        5800
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x265"
    },
    "846": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5720,
        5800
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "847": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5743,
        5750
      ],
      "op": "DUP6",
      "path": "0"
    },
    "848": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5743,
        5750
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "849": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5799
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x314"
    },
    "852": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5799
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "853": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5789,
        5799
      ],
      "op": "DUP7",
      "path": "0"
    },
    "854": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5789,
        5799
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "855": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5752,
        5799
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8A2"
    },
    "858": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5752,
        5799
      ],
      "op": "JUMP",
      "path": "0"
    },
    "859": {
      "fn": "ERC20.symbol",
      "offset": [
        2288,
        2390
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "860": {
      "fn": "ERC20.symbol",
      "offset": [
        2344,
        2357
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "862": {
      "fn": "ERC20.symbol",
      "offset": [
        2376,
        2383
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 13,
      "value": "0x4"
    },
    "864": {
      "fn": "ERC20.symbol",
      "offset": [
        2369,
        2383
      ],
      "op": "DUP1",
      "path": "0"
    },
    "865": {
      "fn": "ERC20.symbol",
      "offset": [
        2369,
        2383
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "866": {
      "fn": "ERC20.symbol",
      "offset": [
        2369,
        2383
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1D5"
    },
    "869": {
      "fn": "ERC20.symbol",
      "offset": [
        2369,
        2383
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "870": {
      "fn": "ERC20.symbol",
      "offset": [
        2369,
        2383
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x83A"
    },
    "873": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2369,
        2383
      ],
      "op": "JUMP",
      "path": "0"
    },
    "874": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6315,
        6686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "875": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "3"
    },
    "876": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6408,
        6412
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "878": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6476
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "879": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6476
      ],
      "op": "DUP2",
      "path": "0"
    },
    "880": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6476
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "881": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6462
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "883": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6476
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "885": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6476
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "886": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6476
      ],
      "op": "DUP2",
      "path": "0"
    },
    "887": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6476
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "888": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6476
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "890": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6476
      ],
      "op": "DUP1",
      "path": "0"
    },
    "891": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6476
      ],
      "op": "DUP4",
      "path": "0"
    },
    "892": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6476
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "893": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "895": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "897": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "899": {
      "op": "SHL"
    },
    "900": {
      "op": "SUB"
    },
    "901": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6485
      ],
      "op": "DUP7",
      "path": "0"
    },
    "902": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6485
      ],
      "op": "AND",
      "path": "0"
    },
    "903": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6485
      ],
      "op": "DUP5",
      "path": "0"
    },
    "904": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6485
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "905": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6485
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "906": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6485
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "907": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6485
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "908": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6485
      ],
      "op": "DUP2",
      "path": "0"
    },
    "909": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6485
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "910": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6451,
        6485
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "911": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6503,
        6538
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 14
    },
    "912": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6503,
        6538
      ],
      "op": "DUP2",
      "path": "0"
    },
    "913": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6503,
        6538
      ],
      "op": "LT",
      "path": "0"
    },
    "914": {
      "branch": 29,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6503,
        6538
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "915": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6495,
        6580
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3EC"
    },
    "918": {
      "branch": 29,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6495,
        6580
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "919": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6495,
        6580
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "921": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6495,
        6580
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "922": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "926": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "928": {
      "op": "SHL"
    },
    "929": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6495,
        6580
      ],
      "op": "DUP2",
      "path": "0"
    },
    "930": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6495,
        6580
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "931": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "933": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6495,
        6580
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "935": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6495,
        6580
      ],
      "op": "DUP3",
      "path": "0"
    },
    "936": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6495,
        6580
      ],
      "op": "ADD",
      "path": "0"
    },
    "937": {
      "op": "MSTORE"
    },
    "938": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "940": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "942": {
      "op": "DUP3"
    },
    "943": {
      "op": "ADD"
    },
    "944": {
      "op": "MSTORE"
    },
    "945": {
      "op": "PUSH32",
      "value": "0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
    },
    "978": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "980": {
      "op": "DUP3"
    },
    "981": {
      "op": "ADD"
    },
    "982": {
      "op": "MSTORE"
    },
    "983": {
      "op": "PUSH5",
      "value": "0x207A65726F"
    },
    "989": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "991": {
      "op": "SHL"
    },
    "992": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "994": {
      "op": "DUP3"
    },
    "995": {
      "op": "ADD"
    },
    "996": {
      "op": "MSTORE"
    },
    "997": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "999": {
      "op": "ADD"
    },
    "1000": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6495,
        6580
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2FC"
    },
    "1003": {
      "op": "JUMP"
    },
    "1004": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6495,
        6580
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1005": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6590,
        6657
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 15,
      "value": "0x3FB"
    },
    "1008": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "3"
    },
    "1009": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6613,
        6620
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1010": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6622,
        6656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x314"
    },
    "1013": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6641,
        6656
      ],
      "op": "DUP7",
      "path": "0"
    },
    "1014": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6622,
        6638
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1015": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6622,
        6656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x88B"
    },
    "1018": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6622,
        6656
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1019": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6590,
        6657
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1020": {
      "op": "POP"
    },
    "1021": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6675,
        6679
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 16,
      "value": "0x1"
    },
    "1023": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6675,
        6679
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1024": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6315,
        6686
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1025": {
      "op": "POP"
    },
    "1026": {
      "op": "POP"
    },
    "1027": {
      "op": "POP"
    },
    "1028": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "o",
      "offset": [
        6315,
        6686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1029": {
      "fn": "ERC20.transfer",
      "offset": [
        3657,
        3829
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1030": {
      "fn": "ERC20.transfer",
      "offset": [
        3743,
        3747
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1032": {
      "fn": "ERC20.transfer",
      "offset": [
        3759,
        3801
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 17,
      "value": "0x265"
    },
    "1035": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "3"
    },
    "1036": {
      "fn": "ERC20.transfer",
      "offset": [
        3783,
        3792
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1037": {
      "fn": "ERC20.transfer",
      "offset": [
        3794,
        3800
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1038": {
      "fn": "ERC20.transfer",
      "offset": [
        3759,
        3768
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x536"
    },
    "1041": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3759,
        3801
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1042": {
      "fn": "ERC20._approve",
      "offset": [
        9579,
        9919
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1043": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1045": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1047": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1049": {
      "op": "SHL"
    },
    "1050": {
      "op": "SUB"
    },
    "1051": {
      "fn": "ERC20._approve",
      "offset": [
        9680,
        9699
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 18
    },
    "1052": {
      "branch": 30,
      "fn": "ERC20._approve",
      "offset": [
        9680,
        9699
      ],
      "op": "AND",
      "path": "0"
    },
    "1053": {
      "fn": "ERC20._approve",
      "offset": [
        9672,
        9740
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x474"
    },
    "1056": {
      "branch": 30,
      "fn": "ERC20._approve",
      "offset": [
        9672,
        9740
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1057": {
      "fn": "ERC20._approve",
      "offset": [
        9672,
        9740
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1059": {
      "fn": "ERC20._approve",
      "offset": [
        9672,
        9740
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1060": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1064": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1066": {
      "op": "SHL"
    },
    "1067": {
      "fn": "ERC20._approve",
      "offset": [
        9672,
        9740
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1068": {
      "fn": "ERC20._approve",
      "offset": [
        9672,
        9740
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1069": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1071": {
      "fn": "ERC20._approve",
      "offset": [
        9672,
        9740
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1073": {
      "fn": "ERC20._approve",
      "offset": [
        9672,
        9740
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1074": {
      "fn": "ERC20._approve",
      "offset": [
        9672,
        9740
      ],
      "op": "ADD",
      "path": "0"
    },
    "1075": {
      "op": "MSTORE"
    },
    "1076": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1078": {
      "op": "DUP1"
    },
    "1079": {
      "op": "DUP3"
    },
    "1080": {
      "op": "ADD"
    },
    "1081": {
      "op": "MSTORE"
    },
    "1082": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
    },
    "1115": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1117": {
      "op": "DUP3"
    },
    "1118": {
      "op": "ADD"
    },
    "1119": {
      "op": "MSTORE"
    },
    "1120": {
      "op": "PUSH4",
      "value": "0x72657373"
    },
    "1125": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1127": {
      "op": "SHL"
    },
    "1128": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1130": {
      "op": "DUP3"
    },
    "1131": {
      "op": "ADD"
    },
    "1132": {
      "op": "MSTORE"
    },
    "1133": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1135": {
      "op": "ADD"
    },
    "1136": {
      "fn": "ERC20._approve",
      "offset": [
        9672,
        9740
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2FC"
    },
    "1139": {
      "op": "JUMP"
    },
    "1140": {
      "fn": "ERC20._approve",
      "offset": [
        9672,
        9740
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1141": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1143": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1145": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1147": {
      "op": "SHL"
    },
    "1148": {
      "op": "SUB"
    },
    "1149": {
      "fn": "ERC20._approve",
      "offset": [
        9758,
        9779
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 19
    },
    "1150": {
      "branch": 31,
      "fn": "ERC20._approve",
      "offset": [
        9758,
        9779
      ],
      "op": "AND",
      "path": "0"
    },
    "1151": {
      "fn": "ERC20._approve",
      "offset": [
        9750,
        9818
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4D5"
    },
    "1154": {
      "branch": 31,
      "fn": "ERC20._approve",
      "offset": [
        9750,
        9818
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1155": {
      "fn": "ERC20._approve",
      "offset": [
        9750,
        9818
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1157": {
      "fn": "ERC20._approve",
      "offset": [
        9750,
        9818
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1158": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1162": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1164": {
      "op": "SHL"
    },
    "1165": {
      "fn": "ERC20._approve",
      "offset": [
        9750,
        9818
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1166": {
      "fn": "ERC20._approve",
      "offset": [
        9750,
        9818
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1167": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1169": {
      "fn": "ERC20._approve",
      "offset": [
        9750,
        9818
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1171": {
      "fn": "ERC20._approve",
      "offset": [
        9750,
        9818
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1172": {
      "fn": "ERC20._approve",
      "offset": [
        9750,
        9818
      ],
      "op": "ADD",
      "path": "0"
    },
    "1173": {
      "op": "MSTORE"
    },
    "1174": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "1176": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1178": {
      "op": "DUP3"
    },
    "1179": {
      "op": "ADD"
    },
    "1180": {
      "op": "MSTORE"
    },
    "1181": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F766520746F20746865207A65726F206164647265"
    },
    "1214": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1216": {
      "op": "DUP3"
    },
    "1217": {
      "op": "ADD"
    },
    "1218": {
      "op": "MSTORE"
    },
    "1219": {
      "op": "PUSH2",
      "value": "0x7373"
    },
    "1222": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "1224": {
      "op": "SHL"
    },
    "1225": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1227": {
      "op": "DUP3"
    },
    "1228": {
      "op": "ADD"
    },
    "1229": {
      "op": "MSTORE"
    },
    "1230": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1232": {
      "op": "ADD"
    },
    "1233": {
      "fn": "ERC20._approve",
      "offset": [
        9750,
        9818
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2FC"
    },
    "1236": {
      "op": "JUMP"
    },
    "1237": {
      "fn": "ERC20._approve",
      "offset": [
        9750,
        9818
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1238": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1240": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1242": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1244": {
      "op": "SHL"
    },
    "1245": {
      "op": "SUB"
    },
    "1246": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 20
    },
    "1247": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1248": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "AND",
      "path": "0"
    },
    "1249": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1251": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1252": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1253": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1254": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9840
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1256": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1258": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1259": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1260": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1261": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1263": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1264": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1265": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9847
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1266": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9856
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "1267": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9856
      ],
      "op": "DUP8",
      "path": "0"
    },
    "1268": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9856
      ],
      "op": "AND",
      "path": "0"
    },
    "1269": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9856
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1270": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9856
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1271": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9856
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1272": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9856
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "1273": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9856
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1274": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9856
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1275": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9856
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1276": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9856
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1277": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9856
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1278": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9856
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1279": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9865
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1280": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9865
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1281": {
      "fn": "ERC20._approve",
      "offset": [
        9829,
        9865
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1282": {
      "fn": "ERC20._approve",
      "offset": [
        9880,
        9912
      ],
      "op": "SWAP1",
      "path": "0",
      "statement": 21
    },
    "1283": {
      "fn": "ERC20._approve",
      "offset": [
        9880,
        9912
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1284": {
      "op": "DUP5"
    },
    "1285": {
      "op": "DUP2"
    },
    "1286": {
      "op": "MSTORE"
    },
    "1287": {
      "fn": "ERC20._approve",
      "offset": [
        9880,
        9912
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "1320": {
      "fn": "ERC20._approve",
      "offset": [
        9880,
        9912
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1321": {
      "op": "ADD"
    },
    "1322": {
      "fn": "ERC20._approve",
      "offset": [
        9880,
        9912
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1324": {
      "fn": "ERC20._approve",
      "offset": [
        9880,
        9912
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1325": {
      "fn": "ERC20._approve",
      "offset": [
        9880,
        9912
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1326": {
      "fn": "ERC20._approve",
      "offset": [
        9880,
        9912
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1327": {
      "fn": "ERC20._approve",
      "offset": [
        9880,
        9912
      ],
      "op": "SUB",
      "path": "0"
    },
    "1328": {
      "fn": "ERC20._approve",
      "offset": [
        9880,
        9912
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1329": {
      "fn": "ERC20._approve",
      "offset": [
        9880,
        9912
      ],
      "op": "LOG3",
      "path": "0"
    },
    "1330": {
      "fn": "ERC20._approve",
      "offset": [
        9579,
        9919
      ],
      "op": "POP",
      "path": "0"
    },
    "1331": {
      "fn": "ERC20._approve",
      "offset": [
        9579,
        9919
      ],
      "op": "POP",
      "path": "0"
    },
    "1332": {
      "fn": "ERC20._approve",
      "offset": [
        9579,
        9919
      ],
      "op": "POP",
      "path": "0"
    },
    "1333": {
      "fn": "ERC20._approve",
      "jump": "o",
      "offset": [
        9579,
        9919
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1334": {
      "fn": "ERC20._transfer",
      "offset": [
        7160,
        7752
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1335": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1337": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1339": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1341": {
      "op": "SHL"
    },
    "1342": {
      "op": "SUB"
    },
    "1343": {
      "fn": "ERC20._transfer",
      "offset": [
        7265,
        7285
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 22
    },
    "1344": {
      "branch": 32,
      "fn": "ERC20._transfer",
      "offset": [
        7265,
        7285
      ],
      "op": "AND",
      "path": "0"
    },
    "1345": {
      "fn": "ERC20._transfer",
      "offset": [
        7257,
        7327
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x59A"
    },
    "1348": {
      "branch": 32,
      "fn": "ERC20._transfer",
      "offset": [
        7257,
        7327
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1349": {
      "fn": "ERC20._transfer",
      "offset": [
        7257,
        7327
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1351": {
      "fn": "ERC20._transfer",
      "offset": [
        7257,
        7327
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1352": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1356": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1358": {
      "op": "SHL"
    },
    "1359": {
      "fn": "ERC20._transfer",
      "offset": [
        7257,
        7327
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1360": {
      "fn": "ERC20._transfer",
      "offset": [
        7257,
        7327
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1361": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1363": {
      "fn": "ERC20._transfer",
      "offset": [
        7257,
        7327
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1365": {
      "fn": "ERC20._transfer",
      "offset": [
        7257,
        7327
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1366": {
      "fn": "ERC20._transfer",
      "offset": [
        7257,
        7327
      ],
      "op": "ADD",
      "path": "0"
    },
    "1367": {
      "op": "MSTORE"
    },
    "1368": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "1370": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1372": {
      "op": "DUP3"
    },
    "1373": {
      "op": "ADD"
    },
    "1374": {
      "op": "MSTORE"
    },
    "1375": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E736665722066726F6D20746865207A65726F206164"
    },
    "1408": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1410": {
      "op": "DUP3"
    },
    "1411": {
      "op": "ADD"
    },
    "1412": {
      "op": "MSTORE"
    },
    "1413": {
      "op": "PUSH5",
      "value": "0x6472657373"
    },
    "1419": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "1421": {
      "op": "SHL"
    },
    "1422": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1424": {
      "op": "DUP3"
    },
    "1425": {
      "op": "ADD"
    },
    "1426": {
      "op": "MSTORE"
    },
    "1427": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1429": {
      "op": "ADD"
    },
    "1430": {
      "fn": "ERC20._transfer",
      "offset": [
        7257,
        7327
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2FC"
    },
    "1433": {
      "op": "JUMP"
    },
    "1434": {
      "fn": "ERC20._transfer",
      "offset": [
        7257,
        7327
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1435": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1437": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1439": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1441": {
      "op": "SHL"
    },
    "1442": {
      "op": "SUB"
    },
    "1443": {
      "fn": "ERC20._transfer",
      "offset": [
        7345,
        7368
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 23
    },
    "1444": {
      "branch": 33,
      "fn": "ERC20._transfer",
      "offset": [
        7345,
        7368
      ],
      "op": "AND",
      "path": "0"
    },
    "1445": {
      "fn": "ERC20._transfer",
      "offset": [
        7337,
        7408
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5FC"
    },
    "1448": {
      "branch": 33,
      "fn": "ERC20._transfer",
      "offset": [
        7337,
        7408
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1449": {
      "fn": "ERC20._transfer",
      "offset": [
        7337,
        7408
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1451": {
      "fn": "ERC20._transfer",
      "offset": [
        7337,
        7408
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1452": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1456": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1458": {
      "op": "SHL"
    },
    "1459": {
      "fn": "ERC20._transfer",
      "offset": [
        7337,
        7408
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1460": {
      "fn": "ERC20._transfer",
      "offset": [
        7337,
        7408
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1461": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1463": {
      "fn": "ERC20._transfer",
      "offset": [
        7337,
        7408
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1465": {
      "fn": "ERC20._transfer",
      "offset": [
        7337,
        7408
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1466": {
      "fn": "ERC20._transfer",
      "offset": [
        7337,
        7408
      ],
      "op": "ADD",
      "path": "0"
    },
    "1467": {
      "op": "MSTORE"
    },
    "1468": {
      "op": "PUSH1",
      "value": "0x23"
    },
    "1470": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1472": {
      "op": "DUP3"
    },
    "1473": {
      "op": "ADD"
    },
    "1474": {
      "op": "MSTORE"
    },
    "1475": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220746F20746865207A65726F2061646472"
    },
    "1508": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1510": {
      "op": "DUP3"
    },
    "1511": {
      "op": "ADD"
    },
    "1512": {
      "op": "MSTORE"
    },
    "1513": {
      "op": "PUSH3",
      "value": "0x657373"
    },
    "1517": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "1519": {
      "op": "SHL"
    },
    "1520": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1522": {
      "op": "DUP3"
    },
    "1523": {
      "op": "ADD"
    },
    "1524": {
      "op": "MSTORE"
    },
    "1525": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1527": {
      "op": "ADD"
    },
    "1528": {
      "fn": "ERC20._transfer",
      "offset": [
        7337,
        7408
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2FC"
    },
    "1531": {
      "op": "JUMP"
    },
    "1532": {
      "fn": "ERC20._transfer",
      "offset": [
        7337,
        7408
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1533": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1535": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1537": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1539": {
      "op": "SHL"
    },
    "1540": {
      "op": "SUB"
    },
    "1541": {
      "fn": "ERC20._transfer",
      "offset": [
        7501,
        7518
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1542": {
      "fn": "ERC20._transfer",
      "offset": [
        7501,
        7518
      ],
      "op": "AND",
      "path": "0"
    },
    "1543": {
      "fn": "ERC20._transfer",
      "offset": [
        7477,
        7498
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1545": {
      "fn": "ERC20._transfer",
      "offset": [
        7501,
        7518
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1546": {
      "fn": "ERC20._transfer",
      "offset": [
        7501,
        7518
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1547": {
      "fn": "ERC20._transfer",
      "offset": [
        7501,
        7518
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1548": {
      "fn": "ERC20._transfer",
      "offset": [
        7501,
        7518
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1550": {
      "fn": "ERC20._transfer",
      "offset": [
        7501,
        7518
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1551": {
      "fn": "ERC20._transfer",
      "offset": [
        7501,
        7518
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1552": {
      "fn": "ERC20._transfer",
      "offset": [
        7501,
        7518
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1553": {
      "fn": "ERC20._transfer",
      "offset": [
        7501,
        7518
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1555": {
      "fn": "ERC20._transfer",
      "offset": [
        7501,
        7518
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1556": {
      "fn": "ERC20._transfer",
      "offset": [
        7501,
        7518
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1557": {
      "fn": "ERC20._transfer",
      "offset": [
        7501,
        7518
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1558": {
      "fn": "ERC20._transfer",
      "offset": [
        7536,
        7559
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 24
    },
    "1559": {
      "fn": "ERC20._transfer",
      "offset": [
        7536,
        7559
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1560": {
      "fn": "ERC20._transfer",
      "offset": [
        7536,
        7559
      ],
      "op": "LT",
      "path": "0"
    },
    "1561": {
      "branch": 34,
      "fn": "ERC20._transfer",
      "offset": [
        7536,
        7559
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1562": {
      "fn": "ERC20._transfer",
      "offset": [
        7528,
        7602
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x674"
    },
    "1565": {
      "branch": 34,
      "fn": "ERC20._transfer",
      "offset": [
        7528,
        7602
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1566": {
      "fn": "ERC20._transfer",
      "offset": [
        7528,
        7602
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1568": {
      "fn": "ERC20._transfer",
      "offset": [
        7528,
        7602
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1569": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1573": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1575": {
      "op": "SHL"
    },
    "1576": {
      "fn": "ERC20._transfer",
      "offset": [
        7528,
        7602
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1577": {
      "fn": "ERC20._transfer",
      "offset": [
        7528,
        7602
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1578": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1580": {
      "fn": "ERC20._transfer",
      "offset": [
        7528,
        7602
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1582": {
      "fn": "ERC20._transfer",
      "offset": [
        7528,
        7602
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1583": {
      "fn": "ERC20._transfer",
      "offset": [
        7528,
        7602
      ],
      "op": "ADD",
      "path": "0"
    },
    "1584": {
      "op": "MSTORE"
    },
    "1585": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "1587": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1589": {
      "op": "DUP3"
    },
    "1590": {
      "op": "ADD"
    },
    "1591": {
      "op": "MSTORE"
    },
    "1592": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732062"
    },
    "1625": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1627": {
      "op": "DUP3"
    },
    "1628": {
      "op": "ADD"
    },
    "1629": {
      "op": "MSTORE"
    },
    "1630": {
      "op": "PUSH6",
      "value": "0x616C616E6365"
    },
    "1637": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "1639": {
      "op": "SHL"
    },
    "1640": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1642": {
      "op": "DUP3"
    },
    "1643": {
      "op": "ADD"
    },
    "1644": {
      "op": "MSTORE"
    },
    "1645": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1647": {
      "op": "ADD"
    },
    "1648": {
      "fn": "ERC20._transfer",
      "offset": [
        7528,
        7602
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2FC"
    },
    "1651": {
      "op": "JUMP"
    },
    "1652": {
      "fn": "ERC20._transfer",
      "offset": [
        7528,
        7602
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1653": {
      "fn": "ERC20._transfer",
      "offset": [
        7632,
        7654
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 25,
      "value": "0x67E"
    },
    "1656": {
      "fn": "ERC20._transfer",
      "offset": [
        7648,
        7654
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1657": {
      "fn": "ERC20._transfer",
      "offset": [
        7632,
        7645
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1658": {
      "fn": "ERC20._transfer",
      "offset": [
        7632,
        7654
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x88B"
    },
    "1661": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7632,
        7654
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1662": {
      "fn": "ERC20._transfer",
      "offset": [
        7632,
        7654
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1663": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1665": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1667": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1669": {
      "op": "SHL"
    },
    "1670": {
      "op": "SUB"
    },
    "1671": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1672": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "DUP7",
      "path": "0"
    },
    "1673": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "AND",
      "path": "0"
    },
    "1674": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1676": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1677": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1678": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1679": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1681": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1682": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1683": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1684": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1686": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1687": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1688": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7629
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1689": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7654
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1690": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7654
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1691": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7654
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1692": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7654
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1693": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7684
      ],
      "op": "SWAP1",
      "path": "0",
      "statement": 26
    },
    "1694": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7684
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1695": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7684
      ],
      "op": "AND",
      "path": "0"
    },
    "1696": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7684
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1697": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7684
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1698": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7684
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1699": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7684
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1700": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7684
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1701": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7694
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1702": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7694
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1703": {
      "fn": "ERC20._transfer",
      "offset": [
        7688,
        7694
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1704": {
      "fn": "ERC20._transfer",
      "offset": [
        7688,
        7694
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1705": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7621
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1706": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7694
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6B4"
    },
    "1709": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7694
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1710": {
      "fn": "ERC20._transfer",
      "offset": [
        7688,
        7694
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1711": {
      "fn": "ERC20._transfer",
      "offset": [
        7688,
        7694
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1712": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7694
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8A2"
    },
    "1715": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7664,
        7694
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1716": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7694
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1717": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7694
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1718": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7694
      ],
      "op": "POP",
      "path": "0"
    },
    "1719": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7694
      ],
      "op": "POP",
      "path": "0"
    },
    "1720": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7694
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1721": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7694
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1722": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7694
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1723": {
      "fn": "ERC20._transfer",
      "offset": [
        7664,
        7694
      ],
      "op": "POP",
      "path": "0"
    },
    "1724": {
      "fn": "ERC20._transfer",
      "offset": [
        7727,
        7736
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 27
    },
    "1725": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1727": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1729": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1731": {
      "op": "SHL"
    },
    "1732": {
      "op": "SUB"
    },
    "1733": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "AND",
      "path": "0"
    },
    "1734": {
      "fn": "ERC20._transfer",
      "offset": [
        7719,
        7725
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1735": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1737": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1739": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1741": {
      "op": "SHL"
    },
    "1742": {
      "op": "SUB"
    },
    "1743": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "AND",
      "path": "0"
    },
    "1744": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "1777": {
      "fn": "ERC20._transfer",
      "offset": [
        7738,
        7744
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1778": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1780": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1781": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x700"
    },
    "1784": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1785": {
      "op": "DUP2"
    },
    "1786": {
      "op": "MSTORE"
    },
    "1787": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1789": {
      "op": "ADD"
    },
    "1790": {
      "op": "SWAP1"
    },
    "1791": {
      "op": "JUMP"
    },
    "1792": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1793": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1795": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1796": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1797": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1798": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "SUB",
      "path": "0"
    },
    "1799": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1800": {
      "fn": "ERC20._transfer",
      "offset": [
        7710,
        7745
      ],
      "op": "LOG3",
      "path": "0"
    },
    "1801": {
      "fn": "ERC20._transfer",
      "offset": [
        7247,
        7752
      ],
      "op": "POP",
      "path": "0"
    },
    "1802": {
      "fn": "ERC20._transfer",
      "offset": [
        7160,
        7752
      ],
      "op": "POP",
      "path": "0"
    },
    "1803": {
      "fn": "ERC20._transfer",
      "offset": [
        7160,
        7752
      ],
      "op": "POP",
      "path": "0"
    },
    "1804": {
      "fn": "ERC20._transfer",
      "offset": [
        7160,
        7752
      ],
      "op": "POP",
      "path": "0"
    },
    "1805": {
      "fn": "ERC20._transfer",
      "jump": "o",
      "offset": [
        7160,
        7752
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1806": {
      "op": "JUMPDEST"
    },
    "1807": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1809": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1811": {
      "op": "DUP1"
    },
    "1812": {
      "op": "DUP4"
    },
    "1813": {
      "op": "MSTORE"
    },
    "1814": {
      "op": "DUP4"
    },
    "1815": {
      "op": "MLOAD"
    },
    "1816": {
      "op": "DUP1"
    },
    "1817": {
      "op": "DUP3"
    },
    "1818": {
      "op": "DUP6"
    },
    "1819": {
      "op": "ADD"
    },
    "1820": {
      "op": "MSTORE"
    },
    "1821": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1823": {
      "op": "JUMPDEST"
    },
    "1824": {
      "op": "DUP2"
    },
    "1825": {
      "op": "DUP2"
    },
    "1826": {
      "op": "LT"
    },
    "1827": {
      "op": "ISZERO"
    },
    "1828": {
      "op": "PUSH2",
      "value": "0x73B"
    },
    "1831": {
      "op": "JUMPI"
    },
    "1832": {
      "op": "DUP6"
    },
    "1833": {
      "op": "DUP2"
    },
    "1834": {
      "op": "ADD"
    },
    "1835": {
      "op": "DUP4"
    },
    "1836": {
      "op": "ADD"
    },
    "1837": {
      "op": "MLOAD"
    },
    "1838": {
      "op": "DUP6"
    },
    "1839": {
      "op": "DUP3"
    },
    "1840": {
      "op": "ADD"
    },
    "1841": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1843": {
      "op": "ADD"
    },
    "1844": {
      "op": "MSTORE"
    },
    "1845": {
      "op": "DUP3"
    },
    "1846": {
      "op": "ADD"
    },
    "1847": {
      "op": "PUSH2",
      "value": "0x71F"
    },
    "1850": {
      "op": "JUMP"
    },
    "1851": {
      "op": "JUMPDEST"
    },
    "1852": {
      "op": "DUP2"
    },
    "1853": {
      "op": "DUP2"
    },
    "1854": {
      "op": "GT"
    },
    "1855": {
      "op": "ISZERO"
    },
    "1856": {
      "op": "PUSH2",
      "value": "0x74D"
    },
    "1859": {
      "op": "JUMPI"
    },
    "1860": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1862": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1864": {
      "op": "DUP4"
    },
    "1865": {
      "op": "DUP8"
    },
    "1866": {
      "op": "ADD"
    },
    "1867": {
      "op": "ADD"
    },
    "1868": {
      "op": "MSTORE"
    },
    "1869": {
      "op": "JUMPDEST"
    },
    "1870": {
      "op": "POP"
    },
    "1871": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1873": {
      "op": "ADD"
    },
    "1874": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1876": {
      "op": "NOT"
    },
    "1877": {
      "op": "AND"
    },
    "1878": {
      "op": "SWAP3"
    },
    "1879": {
      "op": "SWAP1"
    },
    "1880": {
      "op": "SWAP3"
    },
    "1881": {
      "op": "ADD"
    },
    "1882": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1884": {
      "op": "ADD"
    },
    "1885": {
      "op": "SWAP4"
    },
    "1886": {
      "op": "SWAP3"
    },
    "1887": {
      "op": "POP"
    },
    "1888": {
      "op": "POP"
    },
    "1889": {
      "op": "POP"
    },
    "1890": {
      "jump": "o",
      "op": "JUMP"
    },
    "1891": {
      "op": "JUMPDEST"
    },
    "1892": {
      "op": "DUP1"
    },
    "1893": {
      "op": "CALLDATALOAD"
    },
    "1894": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1896": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1898": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1900": {
      "op": "SHL"
    },
    "1901": {
      "op": "SUB"
    },
    "1902": {
      "op": "DUP2"
    },
    "1903": {
      "op": "AND"
    },
    "1904": {
      "op": "DUP2"
    },
    "1905": {
      "op": "EQ"
    },
    "1906": {
      "op": "PUSH2",
      "value": "0x77A"
    },
    "1909": {
      "op": "JUMPI"
    },
    "1910": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1912": {
      "op": "DUP1"
    },
    "1913": {
      "op": "REVERT"
    },
    "1914": {
      "op": "JUMPDEST"
    },
    "1915": {
      "op": "SWAP2"
    },
    "1916": {
      "op": "SWAP1"
    },
    "1917": {
      "op": "POP"
    },
    "1918": {
      "jump": "o",
      "op": "JUMP"
    },
    "1919": {
      "op": "JUMPDEST"
    },
    "1920": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1922": {
      "op": "DUP1"
    },
    "1923": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1925": {
      "op": "DUP4"
    },
    "1926": {
      "op": "DUP6"
    },
    "1927": {
      "op": "SUB"
    },
    "1928": {
      "op": "SLT"
    },
    "1929": {
      "op": "ISZERO"
    },
    "1930": {
      "op": "PUSH2",
      "value": "0x792"
    },
    "1933": {
      "op": "JUMPI"
    },
    "1934": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1936": {
      "op": "DUP1"
    },
    "1937": {
      "op": "REVERT"
    },
    "1938": {
      "op": "JUMPDEST"
    },
    "1939": {
      "op": "PUSH2",
      "value": "0x79B"
    },
    "1942": {
      "op": "DUP4"
    },
    "1943": {
      "op": "PUSH2",
      "value": "0x763"
    },
    "1946": {
      "jump": "i",
      "op": "JUMP"
    },
    "1947": {
      "op": "JUMPDEST"
    },
    "1948": {
      "op": "SWAP5"
    },
    "1949": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1951": {
      "op": "SWAP4"
    },
    "1952": {
      "op": "SWAP1"
    },
    "1953": {
      "op": "SWAP4"
    },
    "1954": {
      "op": "ADD"
    },
    "1955": {
      "op": "CALLDATALOAD"
    },
    "1956": {
      "op": "SWAP4"
    },
    "1957": {
      "op": "POP"
    },
    "1958": {
      "op": "POP"
    },
    "1959": {
      "op": "POP"
    },
    "1960": {
      "jump": "o",
      "op": "JUMP"
    },
    "1961": {
      "op": "JUMPDEST"
    },
    "1962": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1964": {
      "op": "DUP1"
    },
    "1965": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1967": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1969": {
      "op": "DUP5"
    },
    "1970": {
      "op": "DUP7"
    },
    "1971": {
      "op": "SUB"
    },
    "1972": {
      "op": "SLT"
    },
    "1973": {
      "op": "ISZERO"
    },
    "1974": {
      "op": "PUSH2",
      "value": "0x7BE"
    },
    "1977": {
      "op": "JUMPI"
    },
    "1978": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1980": {
      "op": "DUP1"
    },
    "1981": {
      "op": "REVERT"
    },
    "1982": {
      "op": "JUMPDEST"
    },
    "1983": {
      "op": "PUSH2",
      "value": "0x7C7"
    },
    "1986": {
      "op": "DUP5"
    },
    "1987": {
      "op": "PUSH2",
      "value": "0x763"
    },
    "1990": {
      "jump": "i",
      "op": "JUMP"
    },
    "1991": {
      "op": "JUMPDEST"
    },
    "1992": {
      "op": "SWAP3"
    },
    "1993": {
      "op": "POP"
    },
    "1994": {
      "op": "PUSH2",
      "value": "0x7D5"
    },
    "1997": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1999": {
      "op": "DUP6"
    },
    "2000": {
      "op": "ADD"
    },
    "2001": {
      "op": "PUSH2",
      "value": "0x763"
    },
    "2004": {
      "jump": "i",
      "op": "JUMP"
    },
    "2005": {
      "op": "JUMPDEST"
    },
    "2006": {
      "op": "SWAP2"
    },
    "2007": {
      "op": "POP"
    },
    "2008": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2010": {
      "op": "DUP5"
    },
    "2011": {
      "op": "ADD"
    },
    "2012": {
      "op": "CALLDATALOAD"
    },
    "2013": {
      "op": "SWAP1"
    },
    "2014": {
      "op": "POP"
    },
    "2015": {
      "op": "SWAP3"
    },
    "2016": {
      "op": "POP"
    },
    "2017": {
      "op": "SWAP3"
    },
    "2018": {
      "op": "POP"
    },
    "2019": {
      "op": "SWAP3"
    },
    "2020": {
      "jump": "o",
      "op": "JUMP"
    },
    "2021": {
      "op": "JUMPDEST"
    },
    "2022": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2024": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2026": {
      "op": "DUP3"
    },
    "2027": {
      "op": "DUP5"
    },
    "2028": {
      "op": "SUB"
    },
    "2029": {
      "op": "SLT"
    },
    "2030": {
      "op": "ISZERO"
    },
    "2031": {
      "op": "PUSH2",
      "value": "0x7F7"
    },
    "2034": {
      "op": "JUMPI"
    },
    "2035": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2037": {
      "op": "DUP1"
    },
    "2038": {
      "op": "REVERT"
    },
    "2039": {
      "op": "JUMPDEST"
    },
    "2040": {
      "op": "PUSH2",
      "value": "0x800"
    },
    "2043": {
      "op": "DUP3"
    },
    "2044": {
      "op": "PUSH2",
      "value": "0x763"
    },
    "2047": {
      "jump": "i",
      "op": "JUMP"
    },
    "2048": {
      "op": "JUMPDEST"
    },
    "2049": {
      "op": "SWAP4"
    },
    "2050": {
      "op": "SWAP3"
    },
    "2051": {
      "op": "POP"
    },
    "2052": {
      "op": "POP"
    },
    "2053": {
      "op": "POP"
    },
    "2054": {
      "jump": "o",
      "op": "JUMP"
    },
    "2055": {
      "op": "JUMPDEST"
    },
    "2056": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2058": {
      "op": "DUP1"
    },
    "2059": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2061": {
      "op": "DUP4"
    },
    "2062": {
      "op": "DUP6"
    },
    "2063": {
      "op": "SUB"
    },
    "2064": {
      "op": "SLT"
    },
    "2065": {
      "op": "ISZERO"
    },
    "2066": {
      "op": "PUSH2",
      "value": "0x81A"
    },
    "2069": {
      "op": "JUMPI"
    },
    "2070": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2072": {
      "op": "DUP1"
    },
    "2073": {
      "op": "REVERT"
    },
    "2074": {
      "op": "JUMPDEST"
    },
    "2075": {
      "op": "PUSH2",
      "value": "0x823"
    },
    "2078": {
      "op": "DUP4"
    },
    "2079": {
      "op": "PUSH2",
      "value": "0x763"
    },
    "2082": {
      "jump": "i",
      "op": "JUMP"
    },
    "2083": {
      "op": "JUMPDEST"
    },
    "2084": {
      "op": "SWAP2"
    },
    "2085": {
      "op": "POP"
    },
    "2086": {
      "op": "PUSH2",
      "value": "0x831"
    },
    "2089": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2091": {
      "op": "DUP5"
    },
    "2092": {
      "op": "ADD"
    },
    "2093": {
      "op": "PUSH2",
      "value": "0x763"
    },
    "2096": {
      "jump": "i",
      "op": "JUMP"
    },
    "2097": {
      "op": "JUMPDEST"
    },
    "2098": {
      "op": "SWAP1"
    },
    "2099": {
      "op": "POP"
    },
    "2100": {
      "op": "SWAP3"
    },
    "2101": {
      "op": "POP"
    },
    "2102": {
      "op": "SWAP3"
    },
    "2103": {
      "op": "SWAP1"
    },
    "2104": {
      "op": "POP"
    },
    "2105": {
      "jump": "o",
      "op": "JUMP"
    },
    "2106": {
      "op": "JUMPDEST"
    },
    "2107": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2109": {
      "op": "DUP2"
    },
    "2110": {
      "op": "DUP2"
    },
    "2111": {
      "op": "SHR"
    },
    "2112": {
      "op": "SWAP1"
    },
    "2113": {
      "op": "DUP3"
    },
    "2114": {
      "op": "AND"
    },
    "2115": {
      "op": "DUP1"
    },
    "2116": {
      "op": "PUSH2",
      "value": "0x84E"
    },
    "2119": {
      "op": "JUMPI"
    },
    "2120": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "2122": {
      "op": "DUP3"
    },
    "2123": {
      "op": "AND"
    },
    "2124": {
      "op": "SWAP2"
    },
    "2125": {
      "op": "POP"
    },
    "2126": {
      "op": "JUMPDEST"
    },
    "2127": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2129": {
      "op": "DUP3"
    },
    "2130": {
      "op": "LT"
    },
    "2131": {
      "op": "DUP2"
    },
    "2132": {
      "op": "EQ"
    },
    "2133": {
      "op": "ISZERO"
    },
    "2134": {
      "op": "PUSH2",
      "value": "0x86F"
    },
    "2137": {
      "op": "JUMPI"
    },
    "2138": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2143": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2145": {
      "op": "SHL"
    },
    "2146": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2148": {
      "op": "MSTORE"
    },
    "2149": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2151": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2153": {
      "op": "MSTORE"
    },
    "2154": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2156": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2158": {
      "op": "REVERT"
    },
    "2159": {
      "op": "JUMPDEST"
    },
    "2160": {
      "op": "POP"
    },
    "2161": {
      "op": "SWAP2"
    },
    "2162": {
      "op": "SWAP1"
    },
    "2163": {
      "op": "POP"
    },
    "2164": {
      "jump": "o",
      "op": "JUMP"
    },
    "2165": {
      "op": "JUMPDEST"
    },
    "2166": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2171": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2173": {
      "op": "SHL"
    },
    "2174": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2176": {
      "op": "MSTORE"
    },
    "2177": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2179": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2181": {
      "op": "MSTORE"
    },
    "2182": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2184": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2186": {
      "op": "REVERT"
    },
    "2187": {
      "op": "JUMPDEST"
    },
    "2188": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2190": {
      "op": "DUP3"
    },
    "2191": {
      "op": "DUP3"
    },
    "2192": {
      "op": "LT"
    },
    "2193": {
      "op": "ISZERO"
    },
    "2194": {
      "op": "PUSH2",
      "value": "0x89D"
    },
    "2197": {
      "op": "JUMPI"
    },
    "2198": {
      "op": "PUSH2",
      "value": "0x89D"
    },
    "2201": {
      "op": "PUSH2",
      "value": "0x875"
    },
    "2204": {
      "jump": "i",
      "op": "JUMP"
    },
    "2205": {
      "op": "JUMPDEST"
    },
    "2206": {
      "op": "POP"
    },
    "2207": {
      "op": "SUB"
    },
    "2208": {
      "op": "SWAP1"
    },
    "2209": {
      "jump": "o",
      "op": "JUMP"
    },
    "2210": {
      "op": "JUMPDEST"
    },
    "2211": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2213": {
      "op": "DUP3"
    },
    "2214": {
      "op": "NOT"
    },
    "2215": {
      "op": "DUP3"
    },
    "2216": {
      "op": "GT"
    },
    "2217": {
      "op": "ISZERO"
    },
    "2218": {
      "op": "PUSH2",
      "value": "0x8B5"
    },
    "2221": {
      "op": "JUMPI"
    },
    "2222": {
      "op": "PUSH2",
      "value": "0x8B5"
    },
    "2225": {
      "op": "PUSH2",
      "value": "0x875"
    },
    "2228": {
      "jump": "i",
      "op": "JUMP"
    },
    "2229": {
      "op": "JUMPDEST"
    },
    "2230": {
      "op": "POP"
    },
    "2231": {
      "op": "ADD"
    },
    "2232": {
      "op": "SWAP1"
    },
    "2233": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "7123e8ff81652a45b684870ffff7b08a3776de02",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n",
  "sourceMap": "1321:9279:0:-:0;;;1898:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1965:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1988:17:0;;;;:7;;:17;;;;;:::i;:::-;;1898:114;;1321:9279;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1321:9279:0;;;-1:-1:-1;1321:9279:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:5;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:5;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:5;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:5:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:5;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1603:380::-;1682:1;1678:12;;;;1725;;;1746:61;;1800:4;1792:6;1788:17;1778:27;;1746:61;1853:2;1845:6;1842:14;1822:18;1819:38;1816:161;;;1899:10;1894:3;1890:20;1887:1;1880:31;1934:4;1931:1;1924:15;1962:4;1959:1;1952:15;1816:161;;1603:380;;;:::o;:::-;1321:9279:0;;;;;;",
  "sourcePath": "C:/Users/Rishank/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.1.0/contracts/token/ERC20/ERC20.sol",
  "type": "contract"
}